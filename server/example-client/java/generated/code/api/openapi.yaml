openapi: 3.0.0
info:
  title: vcp_server
  version: 0.1.0
servers:
- url: /
paths:
  /vcp/createSignerData:
    post:
      description: Returns SignerData.
      operationId: createSignerData
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ClaimType'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignerData'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create the secret and public data used to sign and verify credentials.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/createAccumulatorData:
    post:
      description: Returns CreateAccumulatorResponse.
      operationId: createAccumulatorData
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccumulatorResponse'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create an accumulator and its associated secret/public data.
      x-accepts:
      - application/json
  /vcp/sign:
    post:
      description: Returns Signature.
      operationId: sign
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signature'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create a signature from the given values and SignerData.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/createAccumulatorElement:
    post:
      description: Returns AccumulatorElement.
      operationId: createAccumulatorElement
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccumulatorElement'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create an accumulator element from the given text.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/accumulatorAddRemove:
    post:
      description: Returns AccumulatorAddRemoveResponse.
      operationId: accumulatorAddRemove
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccumulatorAddRemoveRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccumulatorAddRemoveResponse'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Add and/or remove elements from an accumulator.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/updateAccumulatorWitness:
    post:
      description: Returns AccumulatorMembershipWitness.
      operationId: updateAccumulatorWitness
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccumulatorWitnessRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccumulatorMembershipWitness'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Update an accumulator witness.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/createMembershipProvingKey:
    post:
      description: Returns MembershipProvingKey.
      operationId: createMembershipProvingKey
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipProvingKey'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create accumulator membership proving key.
      x-accepts:
      - application/json
  /vcp/createRangeProofProvingKey:
    post:
      description: Returns RangeProofProvingKey.
      operationId: createRangeProofProvingKey
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeProofProvingKey'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create range proof proving key.
      x-accepts:
      - application/json
  /vcp/getRangeProofMaxValue:
    get:
      description: Returns the maximum value.
      operationId: getRangeProofMaxValue
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                format: uint64
                minimum: 0.0
                type: integer
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Get the maximum value supported in range proofs for the specific zkpLib.
      x-accepts:
      - application/json
  /vcp/createAuthorityData:
    post:
      description: Returns AuthorityData.
      operationId: createAuthorityData
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: false
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          nullable: true
          type: string
        style: form
      - description: A seed for a random number generator. Defaults to zero if not
          given.
        explode: true
        in: query
        name: rngSeed
        required: false
        schema:
          description: A seed for a random number generator. Defaults to zero if not
            given.
          format: uint64
          minimum: 0.0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityData'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create authority data.  Used in verifiable encryption.
      x-accepts:
      - application/json
  /vcp/createProof:
    post:
      description: Returns WarningsAndDataForVerifier.
      operationId: createProof
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProofRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarningsAndDataForVerifier'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Create a proof with respect to proof requirements from a Verifier.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/verifyProof:
    post:
      description: Returns WarningsAndDecryptResponses.
      operationId: verifyProof
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyProofRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarningsAndDecryptResponses'
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Verify a proof with respect to proof requirments.
      x-content-type: application/json
      x-accepts:
      - application/json
  /vcp/verifyDecryption:
    post:
      description: Returns list of Warnings.
      operationId: verifyDecryption
      parameters:
      - description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if\
          \ missing)."
        explode: true
        in: query
        name: zkpLib
        required: true
        schema:
          description: "Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error\
            \ if missing)."
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyDecryptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Warning'
                type: array
          description: ""
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ""
      summary: Verify a decryption.
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    SignerData:
      description: Contains a Signer's secret and public data.
      example:
        signerSecretData: signerSecretData
        signerPublicData:
          signerPublicSetupData: signerPublicSetupData
          signerPublicSchema:
          - CTText
          - CTText
      properties:
        signerPublicData:
          $ref: '#/components/schemas/SignerPublicData'
        signerSecretData:
          description: A Signer's secret keys.
          type: string
      required:
      - signerPublicData
      - signerSecretData
      type: object
    SignerPublicData:
      description: A Signer's public keys and setup data.
      example:
        signerPublicSetupData: signerPublicSetupData
        signerPublicSchema:
        - CTText
        - CTText
      properties:
        signerPublicSetupData:
          description: Data resulting from a Signer's setup.
          type: string
        signerPublicSchema:
          items:
            $ref: '#/components/schemas/ClaimType'
          type: array
      required:
      - signerPublicSchema
      - signerPublicSetupData
      type: object
    SignerPublicSetupData:
      description: Data resulting from a Signer's setup.
      type: string
    ClaimType:
      description: "How values are handled (e.g., accumulator member, encryptable\
        \ text, text, int)."
      enum:
      - CTText
      - CTEncryptableText
      - CTInt
      - CTAccumulatorMember
      type: string
    SignerSecretData:
      description: A Signer's secret keys.
      type: string
    Error:
      example:
        reason: reason
        location: location
      properties:
        reason:
          type: string
        location:
          type: string
      required:
      - location
      - reason
      type: object
    CreateAccumulatorResponse:
      description: Contains the AccumulatorData and the Accumulator.
      example:
        accumulatorData:
          accumulatorPublicData: accumulatorPublicData
          accumulatorSecretData: accumulatorSecretData
        accumulator: accumulator
      properties:
        accumulatorData:
          $ref: '#/components/schemas/AccumulatorData'
        accumulator:
          description: The value of an accumulator.
          type: string
      required:
      - accumulator
      - accumulatorData
      type: object
    AccumulatorData:
      description: Contains an accumulator's secret and public data.
      example:
        accumulatorPublicData: accumulatorPublicData
        accumulatorSecretData: accumulatorSecretData
      properties:
        accumulatorPublicData:
          description: An accumulator's public keys.
          type: string
        accumulatorSecretData:
          description: An accumulator's secret keys.
          type: string
      required:
      - accumulatorPublicData
      - accumulatorSecretData
      type: object
    AccumulatorPublicData:
      description: An accumulator's public keys.
      type: string
    AccumulatorSecretData:
      description: An accumulator's secret keys.
      type: string
    Accumulator:
      description: The value of an accumulator.
      type: string
    Signature:
      description: "A signature, based on the 'values', etc., given in a SignRequest."
      type: string
    SignRequest:
      description: "Sign the given values using the secret data, setup data and claim\
        \ types (i.e., schema) in the given SignerData."
      example:
        signerData: ""
        values:
        - contents: 0
          tag: DVInt
        - contents: 0
          tag: DVInt
      properties:
        values:
          description: The values to be signed.
          items:
            $ref: '#/components/schemas/DataValue'
          type: array
        signerData:
          allOf:
          - $ref: '#/components/schemas/SignerData'
          description: See SignerData.
      required:
      - signerData
      - values
      type: object
    DataValue:
      description: An int or text value.
      oneOf:
      - $ref: '#/components/schemas/DataValue_oneOf'
      - $ref: '#/components/schemas/DataValue_oneOf_1'
    AccumulatorElement:
      description: "An element that may be added to or removed from an accumulator.\
        \  Note, elements are created from text (see createAccumulatorElement)."
      type: string
    AccumulatorAddRemoveResponse:
      description: "Response from call to AccumulatorAddRemove, including data to\
        \ update witnesses, witnesses for added elements, and updated accumlator data\
        \ and value."
      example:
        witnessesForNew:
          key: null
        witnessUpdateInfo: ""
        accumulatorData: ""
        accumulator: ""
      properties:
        witnessUpdateInfo:
          allOf:
          - $ref: '#/components/schemas/AccumulatorWitnessUpdateInfo'
          description: Data to use to update existing witnesses.
        witnessesForNew:
          additionalProperties:
            $ref: '#/components/schemas/AccumulatorMembershipWitness'
          description: A new witnesses for each element added.
          type: object
        accumulatorData:
          allOf:
          - $ref: '#/components/schemas/AccumulatorData'
          description: Updated accumulator data.
        accumulator:
          allOf:
          - $ref: '#/components/schemas/Accumulator'
          description: Updated accumulator value.
      required:
      - accumulator
      - accumulatorData
      - witnessUpdateInfo
      - witnessesForNew
      type: object
    AccumulatorWitnessUpdateInfo:
      description: Data used to update an AccumulatorMembershipWitness after elements
        have been added to and/or removed from an accumulator.
      type: string
    AccumulatorMembershipWitness:
      description: A witness that a particular AccumulatorElement is a member of an
        accumulator.
      type: string
    AccumulatorAddRemoveRequest:
      description: "Elements (if any) to be added to, and elements (if any) to be\
        \ removed from an accumulator."
      example:
        additions:
          key: null
        accumulatorData: ""
        removals:
        - null
        - null
        accumulator: ""
      properties:
        accumulatorData:
          allOf:
          - $ref: '#/components/schemas/AccumulatorData'
          description: See Accumulator Data.
        accumulator:
          allOf:
          - $ref: '#/components/schemas/Accumulator'
          description: See Accumulator.
        additions:
          additionalProperties:
            $ref: '#/components/schemas/AccumulatorElement'
          description: "Elements to be added. This is a map associating each element\
            \ to be added with an (ephemeral) ID that can be used by the requester\
            \ (e.g., Signer/Issuer) to determine who should receive the returned witness."
          type: object
        removals:
          description: Elements to be removed.
          items:
            $ref: '#/components/schemas/AccumulatorElement'
          type: array
      required:
      - accumulator
      - accumulatorData
      - additions
      - removals
      type: object
    UpdateAccumulatorWitnessRequest:
      description: Used to update an existing witness after additions and/or removals
        from an accumulator.
      example:
        witness: ""
        witnessUpdateInfo: ""
        element: ""
      properties:
        witness:
          allOf:
          - $ref: '#/components/schemas/AccumulatorMembershipWitness'
          description: The existing witness before the update.
        element:
          allOf:
          - $ref: '#/components/schemas/AccumulatorElement'
          description: The element used to create the existing witness.
        witnessUpdateInfo:
          allOf:
          - $ref: '#/components/schemas/AccumulatorWitnessUpdateInfo'
          description: Data returned from accumulatorAddRemove.
      required:
      - element
      - witness
      - witnessUpdateInfo
      type: object
    MembershipProvingKey:
      description: Key to use in accumlator membership proofs.
      type: string
    RangeProofProvingKey:
      description: Key to use in range proofs.
      type: string
    AuthorityData:
      description: "Contains an Authority's secret, public, and decryption keys."
      example:
        authoritySecretData: ""
        authorityPublicData: ""
        authorityDecryptionKey: ""
      properties:
        authorityPublicData:
          allOf:
          - $ref: '#/components/schemas/AuthorityPublicData'
          description: An Authority's public key.
        authoritySecretData:
          allOf:
          - $ref: '#/components/schemas/AuthoritySecretData'
          description: An Authority's secret key.
        authorityDecryptionKey:
          allOf:
          - $ref: '#/components/schemas/AuthorityDecryptionKey'
          description: An Authority's decryption key.
      required:
      - authorityDecryptionKey
      - authorityPublicData
      - authoritySecretData
      type: object
    AuthorityPublicData:
      description: An Authority's public key.
      type: string
    AuthoritySecretData:
      description: An Authority's secret key.
      type: string
    AuthorityDecryptionKey:
      description: An Authority's decryption key.
      type: string
    WarningsAndDataForVerifier:
      description: Warnings and DataForVerifier.
      example:
        warnings:
        - contents: contents
          tag: UnsupportedFeature
        - contents: contents
          tag: UnsupportedFeature
        dataForVerifier: ""
      properties:
        warnings:
          description: A list of warnings.
          items:
            $ref: '#/components/schemas/Warning'
          type: array
        dataForVerifier:
          allOf:
          - $ref: '#/components/schemas/DataForVerifier'
          description: Data to be sent to Verifier.
      required:
      - dataForVerifier
      - warnings
      type: object
    Warning:
      oneOf:
      - $ref: '#/components/schemas/Warning_oneOf'
      - $ref: '#/components/schemas/Warning_oneOf_1'
    DataForVerifier:
      description: Data returned from 'createProof'.
      properties:
        revealedIdxsAndVals:
          additionalProperties:
            additionalProperties:
              $ref: '#/components/schemas/DataValue'
            type: object
          description: Data values disclosed by (two-level map keyed by CredentialLabel
            and CredAttrIndex).
          type: object
        proof:
          allOf:
          - $ref: '#/components/schemas/Proof'
          description: A proof.
      required:
      - proof
      - revealedIdxsAndVals
      type: object
    Proof:
      description: A proof returned from createProof.
      type: string
    CreateProofRequest:
      description: Information used for creating a proof.
      example:
        sigsAndRelatedData:
          key:
            accumulatorWitnesses:
              key: null
            signature: ""
            values:
            - null
            - null
        proofReqs:
          key:
            notInAccum: ""
            inAccum: ""
            disclosed: ""
            encryptedFor: ""
            equalTo: ""
            signerLabel: signerLabel
            inRange: ""
        sharedParams:
          key:
            contents:
              contents: 0
              tag: DVInt
            tag: SPVOne
        nonce: nonce
      properties:
        proofReqs:
          additionalProperties:
            $ref: '#/components/schemas/CredentialReqs'
          description: Proof requirements as specified by the Verifier.
          type: object
        sharedParams:
          additionalProperties:
            $ref: '#/components/schemas/SharedParamValue'
          description: "A map of parameter names to values (e.g., public keys)."
          type: object
        sigsAndRelatedData:
          additionalProperties:
            $ref: '#/components/schemas/SignatureAndRelatedData'
          description: A map of credential labels to SignatureAndRelatedData.
          type: object
        nonce:
          description: Arbitrary text.
          type: string
      required:
      - nonce
      - proofReqs
      - sharedParams
      - sigsAndRelatedData
      type: object
    CredentialReqs:
      description: Proof requirements for a specific credential.
      example:
        notInAccum: ""
        inAccum: ""
        disclosed: ""
        encryptedFor: ""
        equalTo: ""
        signerLabel: signerLabel
        inRange: ""
      properties:
        signerLabel:
          description: A key into SharedParams to obtain the Signer's public data.
          type: string
        disclosed:
          allOf:
          - $ref: '#/components/schemas/Disclosed'
          description: Specifies which attributes are to be selectively disclosed.
        inAccum:
          allOf:
          - $ref: '#/components/schemas/InAccum'
          description: Specifies which attributes are to be proved PRESENT in a specified
            accumulator.
        notInAccum:
          allOf:
          - $ref: '#/components/schemas/NotInAccum'
          description: Specifies which attributes are to be proved ABSENT from a specified
            accumulator.
        inRange:
          allOf:
          - $ref: '#/components/schemas/InRange'
          description: Specifies which attributes are to be proved to be within a
            specified range.
        encryptedFor:
          allOf:
          - $ref: '#/components/schemas/EncryptedFor'
          description: Specifies which attributes are to be encrypted for a specified
            Authority.
        equalTo:
          allOf:
          - $ref: '#/components/schemas/EqualTo'
          description: Specifies which attributes in this credential are to be proved
            equal to other specified attributes (usually in other credentials).
      required:
      - disclosed
      - encryptedFor
      - equalTo
      - inAccum
      - inRange
      - notInAccum
      - signerLabel
      type: object
    Disclosed:
      description: A list of indices for attributes that are to be disclosed.
      items:
        format: uint64
        minimum: 0.0
        type: integer
      type: array
    InAccum:
      description: "A list of 'InAccumInfo', each indicating an attribute to be proved\
        \ present in an accumulator and SharedParam keys for relevant parameters."
      items:
        $ref: '#/components/schemas/InAccumInfo'
      type: array
    InAccumInfo:
      description: Used to prove accumulator membership.
      properties:
        index:
          description: Indicates which attribute is to be proved present in an accumulator.
          format: uint64
          minimum: 0.0
          type: integer
        accumulatorPublicDataLabel:
          description: A key into SharedParams to obtain an accumulator's public keys.
          type: string
        membershipProvingKeyLabel:
          description: A key into SharedParams to obtain a MembershipProvingKey.
          type: string
        accumulatorLabel:
          description: A key into SharedParams to obtain an Accumulator value.
          type: string
        accumulatorSeqNumLabel:
          description: A key into SharedParams to obtain a sequence number. A holder
            needs this to find the appropriate witness.
          type: string
      required:
      - accumulatorLabel
      - accumulatorPublicDataLabel
      - accumulatorSeqNumLabel
      - index
      - membershipProvingKeyLabel
      type: object
    NotInAccum:
      description: "Requirements for attributes to be proved ABSENT from an accumulator.\
        \  Out of date, not currently supported."
      items:
        $ref: '#/components/schemas/IndexAndLabel'
      type: array
    IndexAndLabel:
      description: An index-label pair.
      properties:
        index:
          description: An index specifying an attribute.
          format: uint64
          minimum: 0.0
          type: integer
        label:
          description: A key into SharedParams.
          type: string
      required:
      - index
      - label
      type: object
    InRange:
      description: "A list of 'InRangeInfo', each indicating an attribute to be proved\
        \ to be within a range and SharedParam keys for relevant parameters."
      items:
        $ref: '#/components/schemas/InRangeInfo'
      type: array
    InRangeInfo:
      description: Information for range proof requirements.
      properties:
        index:
          description: Specifies the index of the attribute to be proved to be within
            a specified range.
          format: uint64
          minimum: 0.0
          type: integer
        minLabel:
          description: A key into SharedParams used to obtain the minimum value in
            the specified range.
          type: string
        maxLabel:
          description: A key into SharedParams used to obtain the maximum value in
            the specified range.
          type: string
        rangeProvingKeyLabel:
          description: A key into SharedParams used to obtain the proving key to be
            used for the required range proof.
          type: string
      required:
      - index
      - maxLabel
      - minLabel
      - rangeProvingKeyLabel
      type: object
    EncryptedFor:
      description: "A list of index-label pairs, each of which specifies an attribute\
        \ to be encrypted and SharedParam key to obtain the Authority's public information."
      items:
        $ref: '#/components/schemas/IndexAndLabel'
      type: array
    EqualTo:
      description: "A list of 'EqInfo', each of which specifies an attribute to be\
        \ proved equal to another specified attribute."
      items:
        $ref: '#/components/schemas/EqInfo'
      type: array
    EqInfo:
      description: Information specifying equalities between values in different credentials.
      properties:
        fromIndex:
          description: The index of the attribute in this credential that must be
            proved equal to another attribute (usually in another credential).
          format: uint64
          minimum: 0.0
          type: integer
        toLabel:
          description: The label of a credential containing the attribute that is
            to be proved equal to the attribute specified by fromIndex.
          type: string
        toIndex:
          description: The index of the attribute in the credential specified by toLabel
            that is to be proved equal to the attribute specified by fromIndex.
          format: uint64
          minimum: 0.0
          type: integer
      required:
      - fromIndex
      - toIndex
      - toLabel
      type: object
    SharedParamValue:
      description: Either a single value or a list of of values.
      oneOf:
      - $ref: '#/components/schemas/SharedParamValue_oneOf'
      - $ref: '#/components/schemas/SharedParamValue_oneOf_1'
    SignatureAndRelatedData:
      description: "A Signature and other related data, including attribute values\
        \ signed and witnesses for accumlators."
      example:
        accumulatorWitnesses:
          key: null
        signature: ""
        values:
        - null
        - null
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/Signature'
          description: The signature from a Signer signing data values.
        values:
          description: The data values used to produce the signature.
          items:
            $ref: '#/components/schemas/DataValue'
          type: array
        accumulatorWitnesses:
          additionalProperties:
            $ref: '#/components/schemas/AccumulatorMembershipWitness'
          description: Accumulator witnesses.
          type: object
      required:
      - accumulatorWitnesses
      - signature
      - values
      type: object
    WarningsAndDecryptResponses:
      description: Returned from 'verifyProof' if the given proof is valid.
      example:
        decryptResponses:
          key:
            key:
              key:
                decryptionProof: ""
                value: value
        warnings:
        - contents: contents
          tag: UnsupportedFeature
        - contents: contents
          tag: UnsupportedFeature
      properties:
        warnings:
          description: "Warnings, e.g., unsupported features, potentially unintended\
            \ requests, etc."
          items:
            $ref: '#/components/schemas/Warning'
          type: array
        decryptResponses:
          additionalProperties:
            additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/DecryptResponse'
              type: object
            type: object
          description: "Data values decrypted (three-level map keyed by CredentialLabel,\
            \ CredAttrIndex and AuthorityLabel)."
          type: object
      required:
      - decryptResponses
      - warnings
      type: object
    DecryptResponse:
      description: Decrypted values.
      example:
        decryptionProof: ""
        value: value
      properties:
        value:
          description: The decrypted value.
          type: string
        decryptionProof:
          allOf:
          - $ref: '#/components/schemas/DecryptionProof'
          description: A proof that the value is correctly decrypted from proof created
            by Prover.
      required:
      - decryptionProof
      - value
      type: object
    DecryptionProof:
      description: Proof that specified value is correctly decrypted from proof created
        by Prover.
      type: string
    VerifyProofRequest:
      description: Information (including the proof) to verify a proof.
      example:
        proofReqs:
          key:
            notInAccum: ""
            inAccum: ""
            disclosed: ""
            encryptedFor: ""
            equalTo: ""
            signerLabel: signerLabel
            inRange: ""
        decryptRequests:
          key:
            key:
              key:
                authoritySecretData: ""
                authorityDecryptionKey: ""
        sharedParams:
          key:
            contents:
              contents: 0
              tag: DVInt
            tag: SPVOne
        dataForVerifier: ""
        nonce: nonce
      properties:
        proofReqs:
          additionalProperties:
            $ref: '#/components/schemas/CredentialReqs'
          description: Agreed proof requirements.
          type: object
        sharedParams:
          additionalProperties:
            $ref: '#/components/schemas/SharedParamValue'
          description: A map from parameter labels to associated parameter values.
          type: object
        dataForVerifier:
          allOf:
          - $ref: '#/components/schemas/DataForVerifier'
          description: See DataForVerifier.
        decryptRequests:
          additionalProperties:
            additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/DecryptRequest'
              type: object
            type: object
          description: A map from credential label to a map of credential attributed
            index to DecryptRequest.
          type: object
        nonce:
          description: Arbitrary text.
          type: string
      required:
      - dataForVerifier
      - decryptRequests
      - nonce
      - proofReqs
      - sharedParams
      type: object
    DecryptRequest:
      description: Keys for decryption.
      example:
        authoritySecretData: ""
        authorityDecryptionKey: ""
      properties:
        authoritySecretData:
          allOf:
          - $ref: '#/components/schemas/AuthoritySecretData'
          description: Authority secret data.
        authorityDecryptionKey:
          allOf:
          - $ref: '#/components/schemas/AuthorityDecryptionKey'
          description: Authority decryption key.
      required:
      - authorityDecryptionKey
      - authoritySecretData
      type: object
    VerifyDecryptionRequest:
      description: Verify that each decrypted value is correct.
      example:
        proofReqs:
          key:
            notInAccum: ""
            inAccum: ""
            disclosed: ""
            encryptedFor: ""
            equalTo: ""
            signerLabel: signerLabel
            inRange: ""
        sharedParams:
          key:
            contents:
              contents: 0
              tag: DVInt
            tag: SPVOne
        decryptResponses:
          key:
            key:
              key:
                decryptionProof: ""
                value: value
        decryptionKeys:
          key: null
        proof: ""
        nonce: nonce
      properties:
        proofReqs:
          additionalProperties:
            $ref: '#/components/schemas/CredentialReqs'
          description: Agreed proof requirements.
          type: object
        sharedParams:
          additionalProperties:
            $ref: '#/components/schemas/SharedParamValue'
          description: A map from parameter labels to associated parameter values.
          type: object
        proof:
          allOf:
          - $ref: '#/components/schemas/Proof'
          description: See Proof.
        decryptionKeys:
          additionalProperties:
            $ref: '#/components/schemas/AuthorityDecryptionKey'
          description: Map from Authority label to decryption key.
          type: object
        decryptResponses:
          additionalProperties:
            additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/DecryptResponse'
              type: object
            type: object
          description: Map from credential label to credential attribute index to
            DecryptResponse.
          type: object
        nonce:
          description: Arbitrary text.
          type: string
      required:
      - decryptResponses
      - decryptionKeys
      - nonce
      - proof
      - proofReqs
      - sharedParams
      type: object
    DataValue_oneOf:
      example:
        contents: 0
        tag: DVInt
      properties:
        tag:
          enum:
          - DVInt
          type: string
        contents:
          format: uint64
          minimum: 0.0
          type: integer
      required:
      - contents
      - tag
      type: object
    DataValue_oneOf_1:
      properties:
        tag:
          enum:
          - DVText
          type: string
        contents:
          type: string
      required:
      - contents
      - tag
      type: object
    Warning_oneOf:
      example:
        contents: contents
        tag: UnsupportedFeature
      properties:
        tag:
          enum:
          - UnsupportedFeature
          type: string
        contents:
          type: string
      required:
      - contents
      - tag
      type: object
    Warning_oneOf_1:
      properties:
        tag:
          enum:
          - RevealPrivacyWarning
          type: string
        contents:
          items:
            description: TODO default missing array inner type to string
            type: string
          maxItems: 3
          minItems: 3
          type: array
      required:
      - contents
      - tag
      type: object
    SharedParamValue_oneOf:
      example:
        contents:
          contents: 0
          tag: DVInt
        tag: SPVOne
      properties:
        tag:
          enum:
          - SPVOne
          type: string
        contents:
          $ref: '#/components/schemas/DataValue'
      required:
      - contents
      - tag
      type: object
    SharedParamValue_oneOf_1:
      properties:
        tag:
          enum:
          - SPVList
          type: string
        contents:
          items:
            $ref: '#/components/schemas/DataValue'
          type: array
      required:
      - contents
      - tag
      type: object

