/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.ClaimType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Supplies the schema and the (possibly empty) indices of attributes to be blinded.
 */
public class CreateSignerDataRequest {
  public static final String SERIALIZED_NAME_CLAIM_TYPES = "claimTypes";
  @SerializedName(SERIALIZED_NAME_CLAIM_TYPES)
  @javax.annotation.Nonnull
  private List<ClaimType> claimTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLINDED_ATTRIBUTE_INDICES = "blindedAttributeIndices";
  @SerializedName(SERIALIZED_NAME_BLINDED_ATTRIBUTE_INDICES)
  @javax.annotation.Nonnull
  private List<Integer> blindedAttributeIndices = new ArrayList<>();

  public CreateSignerDataRequest() {
  }

  public CreateSignerDataRequest claimTypes(@javax.annotation.Nonnull List<ClaimType> claimTypes) {
    this.claimTypes = claimTypes;
    return this;
  }

  public CreateSignerDataRequest addClaimTypesItem(ClaimType claimTypesItem) {
    if (this.claimTypes == null) {
      this.claimTypes = new ArrayList<>();
    }
    this.claimTypes.add(claimTypesItem);
    return this;
  }

  /**
   * The schema.
   * @return claimTypes
   */
  @javax.annotation.Nonnull
  public List<ClaimType> getClaimTypes() {
    return claimTypes;
  }

  public void setClaimTypes(@javax.annotation.Nonnull List<ClaimType> claimTypes) {
    this.claimTypes = claimTypes;
  }


  public CreateSignerDataRequest blindedAttributeIndices(@javax.annotation.Nonnull List<Integer> blindedAttributeIndices) {
    this.blindedAttributeIndices = blindedAttributeIndices;
    return this;
  }

  public CreateSignerDataRequest addBlindedAttributeIndicesItem(Integer blindedAttributeIndicesItem) {
    if (this.blindedAttributeIndices == null) {
      this.blindedAttributeIndices = new ArrayList<>();
    }
    this.blindedAttributeIndices.add(blindedAttributeIndicesItem);
    return this;
  }

  /**
   * The attributes to be blinded.
   * @return blindedAttributeIndices
   */
  @javax.annotation.Nonnull
  public List<Integer> getBlindedAttributeIndices() {
    return blindedAttributeIndices;
  }

  public void setBlindedAttributeIndices(@javax.annotation.Nonnull List<Integer> blindedAttributeIndices) {
    this.blindedAttributeIndices = blindedAttributeIndices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSignerDataRequest createSignerDataRequest = (CreateSignerDataRequest) o;
    return Objects.equals(this.claimTypes, createSignerDataRequest.claimTypes) &&
        Objects.equals(this.blindedAttributeIndices, createSignerDataRequest.blindedAttributeIndices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimTypes, blindedAttributeIndices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSignerDataRequest {\n");
    sb.append("    claimTypes: ").append(toIndentedString(claimTypes)).append("\n");
    sb.append("    blindedAttributeIndices: ").append(toIndentedString(blindedAttributeIndices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimTypes");
    openapiFields.add("blindedAttributeIndices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("claimTypes");
    openapiRequiredFields.add("blindedAttributeIndices");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSignerDataRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSignerDataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSignerDataRequest is not found in the empty JSON string", CreateSignerDataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSignerDataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSignerDataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSignerDataRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("claimTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("claimTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimTypes` to be an array in the JSON string but got `%s`", jsonObj.get("claimTypes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("blindedAttributeIndices") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blindedAttributeIndices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindedAttributeIndices` to be an array in the JSON string but got `%s`", jsonObj.get("blindedAttributeIndices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSignerDataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSignerDataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSignerDataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSignerDataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSignerDataRequest>() {
           @Override
           public void write(JsonWriter out, CreateSignerDataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSignerDataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSignerDataRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSignerDataRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSignerDataRequest
   */
  public static CreateSignerDataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSignerDataRequest.class);
  }

  /**
   * Convert an instance of CreateSignerDataRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

