/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Used to update an existing witness after additions and/or removals from an accumulator.
 */
public class UpdateAccumulatorWitnessRequest {
  public static final String SERIALIZED_NAME_WITNESS = "witness";
  @SerializedName(SERIALIZED_NAME_WITNESS)
  @javax.annotation.Nonnull
  private String witness;

  public static final String SERIALIZED_NAME_ELEMENT = "element";
  @SerializedName(SERIALIZED_NAME_ELEMENT)
  @javax.annotation.Nonnull
  private String element;

  public static final String SERIALIZED_NAME_WITNESS_UPDATE_INFO = "witnessUpdateInfo";
  @SerializedName(SERIALIZED_NAME_WITNESS_UPDATE_INFO)
  @javax.annotation.Nonnull
  private String witnessUpdateInfo;

  public UpdateAccumulatorWitnessRequest() {
  }

  public UpdateAccumulatorWitnessRequest witness(@javax.annotation.Nonnull String witness) {
    this.witness = witness;
    return this;
  }

  /**
   * The existing witness before the update.
   * @return witness
   */
  @javax.annotation.Nonnull
  public String getWitness() {
    return witness;
  }

  public void setWitness(@javax.annotation.Nonnull String witness) {
    this.witness = witness;
  }


  public UpdateAccumulatorWitnessRequest element(@javax.annotation.Nonnull String element) {
    this.element = element;
    return this;
  }

  /**
   * The element used to create the existing witness.
   * @return element
   */
  @javax.annotation.Nonnull
  public String getElement() {
    return element;
  }

  public void setElement(@javax.annotation.Nonnull String element) {
    this.element = element;
  }


  public UpdateAccumulatorWitnessRequest witnessUpdateInfo(@javax.annotation.Nonnull String witnessUpdateInfo) {
    this.witnessUpdateInfo = witnessUpdateInfo;
    return this;
  }

  /**
   * Data returned from accumulatorAddRemove.
   * @return witnessUpdateInfo
   */
  @javax.annotation.Nonnull
  public String getWitnessUpdateInfo() {
    return witnessUpdateInfo;
  }

  public void setWitnessUpdateInfo(@javax.annotation.Nonnull String witnessUpdateInfo) {
    this.witnessUpdateInfo = witnessUpdateInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest = (UpdateAccumulatorWitnessRequest) o;
    return Objects.equals(this.witness, updateAccumulatorWitnessRequest.witness) &&
        Objects.equals(this.element, updateAccumulatorWitnessRequest.element) &&
        Objects.equals(this.witnessUpdateInfo, updateAccumulatorWitnessRequest.witnessUpdateInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(witness, element, witnessUpdateInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccumulatorWitnessRequest {\n");
    sb.append("    witness: ").append(toIndentedString(witness)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    witnessUpdateInfo: ").append(toIndentedString(witnessUpdateInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("witness");
    openapiFields.add("element");
    openapiFields.add("witnessUpdateInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("witness");
    openapiRequiredFields.add("element");
    openapiRequiredFields.add("witnessUpdateInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAccumulatorWitnessRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccumulatorWitnessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccumulatorWitnessRequest is not found in the empty JSON string", UpdateAccumulatorWitnessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccumulatorWitnessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccumulatorWitnessRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAccumulatorWitnessRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("witness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `witness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("witness").toString()));
      }
      if (!jsonObj.get("element").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `element` to be a primitive type in the JSON string but got `%s`", jsonObj.get("element").toString()));
      }
      if (!jsonObj.get("witnessUpdateInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `witnessUpdateInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("witnessUpdateInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccumulatorWitnessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccumulatorWitnessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccumulatorWitnessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccumulatorWitnessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccumulatorWitnessRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAccumulatorWitnessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccumulatorWitnessRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAccumulatorWitnessRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAccumulatorWitnessRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAccumulatorWitnessRequest
   */
  public static UpdateAccumulatorWitnessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccumulatorWitnessRequest.class);
  }

  /**
   * Convert an instance of UpdateAccumulatorWitnessRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

