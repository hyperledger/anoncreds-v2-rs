/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.SignerPublicData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Contains a Signer&#39;s secret and public data.
 */
public class SignerData {
  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_DATA = "signerPublicData";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_DATA)
  @javax.annotation.Nonnull
  private SignerPublicData signerPublicData;

  public static final String SERIALIZED_NAME_SIGNER_SECRET_DATA = "signerSecretData";
  @SerializedName(SERIALIZED_NAME_SIGNER_SECRET_DATA)
  @javax.annotation.Nonnull
  private String signerSecretData;

  public SignerData() {
  }

  public SignerData signerPublicData(@javax.annotation.Nonnull SignerPublicData signerPublicData) {
    this.signerPublicData = signerPublicData;
    return this;
  }

  /**
   * Get signerPublicData
   * @return signerPublicData
   */
  @javax.annotation.Nonnull
  public SignerPublicData getSignerPublicData() {
    return signerPublicData;
  }

  public void setSignerPublicData(@javax.annotation.Nonnull SignerPublicData signerPublicData) {
    this.signerPublicData = signerPublicData;
  }


  public SignerData signerSecretData(@javax.annotation.Nonnull String signerSecretData) {
    this.signerSecretData = signerSecretData;
    return this;
  }

  /**
   * A Signer&#39;s secret keys.
   * @return signerSecretData
   */
  @javax.annotation.Nonnull
  public String getSignerSecretData() {
    return signerSecretData;
  }

  public void setSignerSecretData(@javax.annotation.Nonnull String signerSecretData) {
    this.signerSecretData = signerSecretData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignerData signerData = (SignerData) o;
    return Objects.equals(this.signerPublicData, signerData.signerPublicData) &&
        Objects.equals(this.signerSecretData, signerData.signerSecretData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerPublicData, signerSecretData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignerData {\n");
    sb.append("    signerPublicData: ").append(toIndentedString(signerPublicData)).append("\n");
    sb.append("    signerSecretData: ").append(toIndentedString(signerSecretData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signerPublicData");
    openapiFields.add("signerSecretData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signerPublicData");
    openapiRequiredFields.add("signerSecretData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignerData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignerData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignerData is not found in the empty JSON string", SignerData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignerData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignerData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignerData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `signerPublicData`
      SignerPublicData.validateJsonElement(jsonObj.get("signerPublicData"));
      if (!jsonObj.get("signerSecretData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerSecretData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerSecretData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignerData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignerData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignerData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignerData.class));

       return (TypeAdapter<T>) new TypeAdapter<SignerData>() {
           @Override
           public void write(JsonWriter out, SignerData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignerData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignerData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignerData
   * @throws IOException if the JSON string is invalid with respect to SignerData
   */
  public static SignerData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignerData.class);
  }

  /**
   * Convert an instance of SignerData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

