/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.DataValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Data returned from &#39;createProof&#39;.
 */
public class DataForVerifier {
  public static final String SERIALIZED_NAME_REVEALED_IDXS_AND_VALS = "revealedIdxsAndVals";
  @SerializedName(SERIALIZED_NAME_REVEALED_IDXS_AND_VALS)
  @javax.annotation.Nonnull
  private Map<String, Map<String, DataValue>> revealedIdxsAndVals = new HashMap<>();

  public static final String SERIALIZED_NAME_PROOF = "proof";
  @SerializedName(SERIALIZED_NAME_PROOF)
  @javax.annotation.Nonnull
  private String proof;

  public DataForVerifier() {
  }

  public DataForVerifier revealedIdxsAndVals(@javax.annotation.Nonnull Map<String, Map<String, DataValue>> revealedIdxsAndVals) {
    this.revealedIdxsAndVals = revealedIdxsAndVals;
    return this;
  }

  public DataForVerifier putRevealedIdxsAndValsItem(String key, Map<String, DataValue> revealedIdxsAndValsItem) {
    if (this.revealedIdxsAndVals == null) {
      this.revealedIdxsAndVals = new HashMap<>();
    }
    this.revealedIdxsAndVals.put(key, revealedIdxsAndValsItem);
    return this;
  }

  /**
   * Data values disclosed by (two-level map keyed by CredentialLabel and CredAttrIndex).
   * @return revealedIdxsAndVals
   */
  @javax.annotation.Nonnull
  public Map<String, Map<String, DataValue>> getRevealedIdxsAndVals() {
    return revealedIdxsAndVals;
  }

  public void setRevealedIdxsAndVals(@javax.annotation.Nonnull Map<String, Map<String, DataValue>> revealedIdxsAndVals) {
    this.revealedIdxsAndVals = revealedIdxsAndVals;
  }


  public DataForVerifier proof(@javax.annotation.Nonnull String proof) {
    this.proof = proof;
    return this;
  }

  /**
   * A proof.
   * @return proof
   */
  @javax.annotation.Nonnull
  public String getProof() {
    return proof;
  }

  public void setProof(@javax.annotation.Nonnull String proof) {
    this.proof = proof;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForVerifier dataForVerifier = (DataForVerifier) o;
    return Objects.equals(this.revealedIdxsAndVals, dataForVerifier.revealedIdxsAndVals) &&
        Objects.equals(this.proof, dataForVerifier.proof);
  }

  @Override
  public int hashCode() {
    return Objects.hash(revealedIdxsAndVals, proof);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForVerifier {\n");
    sb.append("    revealedIdxsAndVals: ").append(toIndentedString(revealedIdxsAndVals)).append("\n");
    sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("revealedIdxsAndVals");
    openapiFields.add("proof");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("revealedIdxsAndVals");
    openapiRequiredFields.add("proof");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataForVerifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataForVerifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataForVerifier is not found in the empty JSON string", DataForVerifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataForVerifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataForVerifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataForVerifier.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("proof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proof").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataForVerifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataForVerifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataForVerifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataForVerifier.class));

       return (TypeAdapter<T>) new TypeAdapter<DataForVerifier>() {
           @Override
           public void write(JsonWriter out, DataForVerifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataForVerifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataForVerifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataForVerifier
   * @throws IOException if the JSON string is invalid with respect to DataForVerifier
   */
  public static DataForVerifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataForVerifier.class);
  }

  /**
   * Convert an instance of DataForVerifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

