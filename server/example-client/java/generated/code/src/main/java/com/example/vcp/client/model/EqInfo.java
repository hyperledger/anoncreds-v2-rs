/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Information specifying equalities between values in different credentials.
 */
public class EqInfo {
  public static final String SERIALIZED_NAME_FROM_INDEX = "fromIndex";
  @SerializedName(SERIALIZED_NAME_FROM_INDEX)
  @javax.annotation.Nonnull
  private Integer fromIndex;

  public static final String SERIALIZED_NAME_TO_LABEL = "toLabel";
  @SerializedName(SERIALIZED_NAME_TO_LABEL)
  @javax.annotation.Nonnull
  private String toLabel;

  public static final String SERIALIZED_NAME_TO_INDEX = "toIndex";
  @SerializedName(SERIALIZED_NAME_TO_INDEX)
  @javax.annotation.Nonnull
  private Integer toIndex;

  public EqInfo() {
  }

  public EqInfo fromIndex(@javax.annotation.Nonnull Integer fromIndex) {
    this.fromIndex = fromIndex;
    return this;
  }

  /**
   * The index of the attribute in this credential that must be proved equal to another attribute (usually in another credential).
   * minimum: 0
   * @return fromIndex
   */
  @javax.annotation.Nonnull
  public Integer getFromIndex() {
    return fromIndex;
  }

  public void setFromIndex(@javax.annotation.Nonnull Integer fromIndex) {
    this.fromIndex = fromIndex;
  }


  public EqInfo toLabel(@javax.annotation.Nonnull String toLabel) {
    this.toLabel = toLabel;
    return this;
  }

  /**
   * The label of a credential containing the attribute that is to be proved equal to the attribute specified by fromIndex.
   * @return toLabel
   */
  @javax.annotation.Nonnull
  public String getToLabel() {
    return toLabel;
  }

  public void setToLabel(@javax.annotation.Nonnull String toLabel) {
    this.toLabel = toLabel;
  }


  public EqInfo toIndex(@javax.annotation.Nonnull Integer toIndex) {
    this.toIndex = toIndex;
    return this;
  }

  /**
   * The index of the attribute in the credential specified by toLabel that is to be proved equal to the attribute specified by fromIndex.
   * minimum: 0
   * @return toIndex
   */
  @javax.annotation.Nonnull
  public Integer getToIndex() {
    return toIndex;
  }

  public void setToIndex(@javax.annotation.Nonnull Integer toIndex) {
    this.toIndex = toIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EqInfo eqInfo = (EqInfo) o;
    return Objects.equals(this.fromIndex, eqInfo.fromIndex) &&
        Objects.equals(this.toLabel, eqInfo.toLabel) &&
        Objects.equals(this.toIndex, eqInfo.toIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromIndex, toLabel, toIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EqInfo {\n");
    sb.append("    fromIndex: ").append(toIndentedString(fromIndex)).append("\n");
    sb.append("    toLabel: ").append(toIndentedString(toLabel)).append("\n");
    sb.append("    toIndex: ").append(toIndentedString(toIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromIndex");
    openapiFields.add("toLabel");
    openapiFields.add("toIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fromIndex");
    openapiRequiredFields.add("toLabel");
    openapiRequiredFields.add("toIndex");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EqInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EqInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EqInfo is not found in the empty JSON string", EqInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EqInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EqInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EqInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("toLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EqInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EqInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EqInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EqInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EqInfo>() {
           @Override
           public void write(JsonWriter out, EqInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EqInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EqInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EqInfo
   * @throws IOException if the JSON string is invalid with respect to EqInfo
   */
  public static EqInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EqInfo.class);
  }

  /**
   * Convert an instance of EqInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

