/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Information for range proof requirements.
 */
public class InRangeInfo {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nonnull
  private Integer index;

  public static final String SERIALIZED_NAME_MIN_LABEL = "minLabel";
  @SerializedName(SERIALIZED_NAME_MIN_LABEL)
  @javax.annotation.Nonnull
  private String minLabel;

  public static final String SERIALIZED_NAME_MAX_LABEL = "maxLabel";
  @SerializedName(SERIALIZED_NAME_MAX_LABEL)
  @javax.annotation.Nonnull
  private String maxLabel;

  public static final String SERIALIZED_NAME_RANGE_PROVING_KEY_LABEL = "rangeProvingKeyLabel";
  @SerializedName(SERIALIZED_NAME_RANGE_PROVING_KEY_LABEL)
  @javax.annotation.Nonnull
  private String rangeProvingKeyLabel;

  public InRangeInfo() {
  }

  public InRangeInfo index(@javax.annotation.Nonnull Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Specifies the index of the attribute to be proved to be within a specified range.
   * minimum: 0
   * @return index
   */
  @javax.annotation.Nonnull
  public Integer getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nonnull Integer index) {
    this.index = index;
  }


  public InRangeInfo minLabel(@javax.annotation.Nonnull String minLabel) {
    this.minLabel = minLabel;
    return this;
  }

  /**
   * A key into SharedParams used to obtain the minimum value in the specified range.
   * @return minLabel
   */
  @javax.annotation.Nonnull
  public String getMinLabel() {
    return minLabel;
  }

  public void setMinLabel(@javax.annotation.Nonnull String minLabel) {
    this.minLabel = minLabel;
  }


  public InRangeInfo maxLabel(@javax.annotation.Nonnull String maxLabel) {
    this.maxLabel = maxLabel;
    return this;
  }

  /**
   * A key into SharedParams used to obtain the maximum value in the specified range.
   * @return maxLabel
   */
  @javax.annotation.Nonnull
  public String getMaxLabel() {
    return maxLabel;
  }

  public void setMaxLabel(@javax.annotation.Nonnull String maxLabel) {
    this.maxLabel = maxLabel;
  }


  public InRangeInfo rangeProvingKeyLabel(@javax.annotation.Nonnull String rangeProvingKeyLabel) {
    this.rangeProvingKeyLabel = rangeProvingKeyLabel;
    return this;
  }

  /**
   * A key into SharedParams used to obtain the proving key to be used for the required range proof.
   * @return rangeProvingKeyLabel
   */
  @javax.annotation.Nonnull
  public String getRangeProvingKeyLabel() {
    return rangeProvingKeyLabel;
  }

  public void setRangeProvingKeyLabel(@javax.annotation.Nonnull String rangeProvingKeyLabel) {
    this.rangeProvingKeyLabel = rangeProvingKeyLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InRangeInfo inRangeInfo = (InRangeInfo) o;
    return Objects.equals(this.index, inRangeInfo.index) &&
        Objects.equals(this.minLabel, inRangeInfo.minLabel) &&
        Objects.equals(this.maxLabel, inRangeInfo.maxLabel) &&
        Objects.equals(this.rangeProvingKeyLabel, inRangeInfo.rangeProvingKeyLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, minLabel, maxLabel, rangeProvingKeyLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InRangeInfo {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    minLabel: ").append(toIndentedString(minLabel)).append("\n");
    sb.append("    maxLabel: ").append(toIndentedString(maxLabel)).append("\n");
    sb.append("    rangeProvingKeyLabel: ").append(toIndentedString(rangeProvingKeyLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("minLabel");
    openapiFields.add("maxLabel");
    openapiFields.add("rangeProvingKeyLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("minLabel");
    openapiRequiredFields.add("maxLabel");
    openapiRequiredFields.add("rangeProvingKeyLabel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InRangeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InRangeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InRangeInfo is not found in the empty JSON string", InRangeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InRangeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InRangeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InRangeInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("minLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minLabel").toString()));
      }
      if (!jsonObj.get("maxLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxLabel").toString()));
      }
      if (!jsonObj.get("rangeProvingKeyLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeProvingKeyLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rangeProvingKeyLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InRangeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InRangeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InRangeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InRangeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<InRangeInfo>() {
           @Override
           public void write(JsonWriter out, InRangeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InRangeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InRangeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InRangeInfo
   * @throws IOException if the JSON string is invalid with respect to InRangeInfo
   */
  public static InRangeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InRangeInfo.class);
  }

  /**
   * Convert an instance of InRangeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

