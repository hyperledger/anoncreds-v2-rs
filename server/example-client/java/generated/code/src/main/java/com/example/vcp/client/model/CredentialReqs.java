/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.EqInfo;
import com.example.vcp.client.model.InAccumInfo;
import com.example.vcp.client.model.InRangeInfo;
import com.example.vcp.client.model.IndexAndLabel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Proof requirements for a specific credential.
 */
public class CredentialReqs {
  public static final String SERIALIZED_NAME_SIGNER_LABEL = "signerLabel";
  @SerializedName(SERIALIZED_NAME_SIGNER_LABEL)
  @javax.annotation.Nonnull
  private String signerLabel;

  public static final String SERIALIZED_NAME_DISCLOSED = "disclosed";
  @SerializedName(SERIALIZED_NAME_DISCLOSED)
  @javax.annotation.Nonnull
  private List<Integer> disclosed;

  public static final String SERIALIZED_NAME_IN_ACCUM = "inAccum";
  @SerializedName(SERIALIZED_NAME_IN_ACCUM)
  @javax.annotation.Nonnull
  private List<InAccumInfo> inAccum;

  public static final String SERIALIZED_NAME_NOT_IN_ACCUM = "notInAccum";
  @SerializedName(SERIALIZED_NAME_NOT_IN_ACCUM)
  @javax.annotation.Nonnull
  private List<IndexAndLabel> notInAccum;

  public static final String SERIALIZED_NAME_IN_RANGE = "inRange";
  @SerializedName(SERIALIZED_NAME_IN_RANGE)
  @javax.annotation.Nonnull
  private List<InRangeInfo> inRange;

  public static final String SERIALIZED_NAME_ENCRYPTED_FOR = "encryptedFor";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_FOR)
  @javax.annotation.Nonnull
  private List<IndexAndLabel> encryptedFor;

  public static final String SERIALIZED_NAME_EQUAL_TO = "equalTo";
  @SerializedName(SERIALIZED_NAME_EQUAL_TO)
  @javax.annotation.Nonnull
  private List<EqInfo> equalTo;

  public CredentialReqs() {
  }

  public CredentialReqs signerLabel(@javax.annotation.Nonnull String signerLabel) {
    this.signerLabel = signerLabel;
    return this;
  }

  /**
   * A key into SharedParams to obtain the Signer&#39;s public data.
   * @return signerLabel
   */
  @javax.annotation.Nonnull
  public String getSignerLabel() {
    return signerLabel;
  }

  public void setSignerLabel(@javax.annotation.Nonnull String signerLabel) {
    this.signerLabel = signerLabel;
  }


  public CredentialReqs disclosed(@javax.annotation.Nonnull List<Integer> disclosed) {
    this.disclosed = disclosed;
    return this;
  }

  public CredentialReqs addDisclosedItem(Integer disclosedItem) {
    if (this.disclosed == null) {
      this.disclosed = new ArrayList<>();
    }
    this.disclosed.add(disclosedItem);
    return this;
  }

  /**
   * Specifies which attributes are to be selectively disclosed.
   * @return disclosed
   */
  @javax.annotation.Nonnull
  public List<Integer> getDisclosed() {
    return disclosed;
  }

  public void setDisclosed(@javax.annotation.Nonnull List<Integer> disclosed) {
    this.disclosed = disclosed;
  }


  public CredentialReqs inAccum(@javax.annotation.Nonnull List<InAccumInfo> inAccum) {
    this.inAccum = inAccum;
    return this;
  }

  public CredentialReqs addInAccumItem(InAccumInfo inAccumItem) {
    if (this.inAccum == null) {
      this.inAccum = new ArrayList<>();
    }
    this.inAccum.add(inAccumItem);
    return this;
  }

  /**
   * Specifies which attributes are to be proved PRESENT in a specified accumulator.
   * @return inAccum
   */
  @javax.annotation.Nonnull
  public List<InAccumInfo> getInAccum() {
    return inAccum;
  }

  public void setInAccum(@javax.annotation.Nonnull List<InAccumInfo> inAccum) {
    this.inAccum = inAccum;
  }


  public CredentialReqs notInAccum(@javax.annotation.Nonnull List<IndexAndLabel> notInAccum) {
    this.notInAccum = notInAccum;
    return this;
  }

  public CredentialReqs addNotInAccumItem(IndexAndLabel notInAccumItem) {
    if (this.notInAccum == null) {
      this.notInAccum = new ArrayList<>();
    }
    this.notInAccum.add(notInAccumItem);
    return this;
  }

  /**
   * Specifies which attributes are to be proved ABSENT from a specified accumulator.
   * @return notInAccum
   */
  @javax.annotation.Nonnull
  public List<IndexAndLabel> getNotInAccum() {
    return notInAccum;
  }

  public void setNotInAccum(@javax.annotation.Nonnull List<IndexAndLabel> notInAccum) {
    this.notInAccum = notInAccum;
  }


  public CredentialReqs inRange(@javax.annotation.Nonnull List<InRangeInfo> inRange) {
    this.inRange = inRange;
    return this;
  }

  public CredentialReqs addInRangeItem(InRangeInfo inRangeItem) {
    if (this.inRange == null) {
      this.inRange = new ArrayList<>();
    }
    this.inRange.add(inRangeItem);
    return this;
  }

  /**
   * Specifies which attributes are to be proved to be within a specified range.
   * @return inRange
   */
  @javax.annotation.Nonnull
  public List<InRangeInfo> getInRange() {
    return inRange;
  }

  public void setInRange(@javax.annotation.Nonnull List<InRangeInfo> inRange) {
    this.inRange = inRange;
  }


  public CredentialReqs encryptedFor(@javax.annotation.Nonnull List<IndexAndLabel> encryptedFor) {
    this.encryptedFor = encryptedFor;
    return this;
  }

  public CredentialReqs addEncryptedForItem(IndexAndLabel encryptedForItem) {
    if (this.encryptedFor == null) {
      this.encryptedFor = new ArrayList<>();
    }
    this.encryptedFor.add(encryptedForItem);
    return this;
  }

  /**
   * Specifies which attributes are to be encrypted for a specified Authority.
   * @return encryptedFor
   */
  @javax.annotation.Nonnull
  public List<IndexAndLabel> getEncryptedFor() {
    return encryptedFor;
  }

  public void setEncryptedFor(@javax.annotation.Nonnull List<IndexAndLabel> encryptedFor) {
    this.encryptedFor = encryptedFor;
  }


  public CredentialReqs equalTo(@javax.annotation.Nonnull List<EqInfo> equalTo) {
    this.equalTo = equalTo;
    return this;
  }

  public CredentialReqs addEqualToItem(EqInfo equalToItem) {
    if (this.equalTo == null) {
      this.equalTo = new ArrayList<>();
    }
    this.equalTo.add(equalToItem);
    return this;
  }

  /**
   * Specifies which attributes in this credential are to be proved equal to other specified attributes (usually in other credentials).
   * @return equalTo
   */
  @javax.annotation.Nonnull
  public List<EqInfo> getEqualTo() {
    return equalTo;
  }

  public void setEqualTo(@javax.annotation.Nonnull List<EqInfo> equalTo) {
    this.equalTo = equalTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialReqs credentialReqs = (CredentialReqs) o;
    return Objects.equals(this.signerLabel, credentialReqs.signerLabel) &&
        Objects.equals(this.disclosed, credentialReqs.disclosed) &&
        Objects.equals(this.inAccum, credentialReqs.inAccum) &&
        Objects.equals(this.notInAccum, credentialReqs.notInAccum) &&
        Objects.equals(this.inRange, credentialReqs.inRange) &&
        Objects.equals(this.encryptedFor, credentialReqs.encryptedFor) &&
        Objects.equals(this.equalTo, credentialReqs.equalTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerLabel, disclosed, inAccum, notInAccum, inRange, encryptedFor, equalTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialReqs {\n");
    sb.append("    signerLabel: ").append(toIndentedString(signerLabel)).append("\n");
    sb.append("    disclosed: ").append(toIndentedString(disclosed)).append("\n");
    sb.append("    inAccum: ").append(toIndentedString(inAccum)).append("\n");
    sb.append("    notInAccum: ").append(toIndentedString(notInAccum)).append("\n");
    sb.append("    inRange: ").append(toIndentedString(inRange)).append("\n");
    sb.append("    encryptedFor: ").append(toIndentedString(encryptedFor)).append("\n");
    sb.append("    equalTo: ").append(toIndentedString(equalTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signerLabel");
    openapiFields.add("disclosed");
    openapiFields.add("inAccum");
    openapiFields.add("notInAccum");
    openapiFields.add("inRange");
    openapiFields.add("encryptedFor");
    openapiFields.add("equalTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signerLabel");
    openapiRequiredFields.add("disclosed");
    openapiRequiredFields.add("inAccum");
    openapiRequiredFields.add("notInAccum");
    openapiRequiredFields.add("inRange");
    openapiRequiredFields.add("encryptedFor");
    openapiRequiredFields.add("equalTo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredentialReqs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredentialReqs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredentialReqs is not found in the empty JSON string", CredentialReqs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredentialReqs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredentialReqs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredentialReqs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("signerLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerLabel").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("disclosed") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("disclosed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclosed` to be an array in the JSON string but got `%s`", jsonObj.get("disclosed").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("inAccum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inAccum` to be an array in the JSON string but got `%s`", jsonObj.get("inAccum").toString()));
      }

      JsonArray jsonArrayinAccum = jsonObj.getAsJsonArray("inAccum");
      // validate the required field `inAccum` (array)
      for (int i = 0; i < jsonArrayinAccum.size(); i++) {
        InAccumInfo.validateJsonElement(jsonArrayinAccum.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("notInAccum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notInAccum` to be an array in the JSON string but got `%s`", jsonObj.get("notInAccum").toString()));
      }

      JsonArray jsonArraynotInAccum = jsonObj.getAsJsonArray("notInAccum");
      // validate the required field `notInAccum` (array)
      for (int i = 0; i < jsonArraynotInAccum.size(); i++) {
        IndexAndLabel.validateJsonElement(jsonArraynotInAccum.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("inRange").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inRange` to be an array in the JSON string but got `%s`", jsonObj.get("inRange").toString()));
      }

      JsonArray jsonArrayinRange = jsonObj.getAsJsonArray("inRange");
      // validate the required field `inRange` (array)
      for (int i = 0; i < jsonArrayinRange.size(); i++) {
        InRangeInfo.validateJsonElement(jsonArrayinRange.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("encryptedFor").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedFor` to be an array in the JSON string but got `%s`", jsonObj.get("encryptedFor").toString()));
      }

      JsonArray jsonArrayencryptedFor = jsonObj.getAsJsonArray("encryptedFor");
      // validate the required field `encryptedFor` (array)
      for (int i = 0; i < jsonArrayencryptedFor.size(); i++) {
        IndexAndLabel.validateJsonElement(jsonArrayencryptedFor.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("equalTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equalTo` to be an array in the JSON string but got `%s`", jsonObj.get("equalTo").toString()));
      }

      JsonArray jsonArrayequalTo = jsonObj.getAsJsonArray("equalTo");
      // validate the required field `equalTo` (array)
      for (int i = 0; i < jsonArrayequalTo.size(); i++) {
        EqInfo.validateJsonElement(jsonArrayequalTo.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredentialReqs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredentialReqs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredentialReqs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredentialReqs.class));

       return (TypeAdapter<T>) new TypeAdapter<CredentialReqs>() {
           @Override
           public void write(JsonWriter out, CredentialReqs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredentialReqs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredentialReqs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredentialReqs
   * @throws IOException if the JSON string is invalid with respect to CredentialReqs
   */
  public static CredentialReqs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredentialReqs.class);
  }

  /**
   * Convert an instance of CredentialReqs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

