/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.ClaimType;
import com.example.vcp.client.model.CredAttrIndexAndDataValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Supplies blinded attributes, InfoForUnblinding and the BlindSignature to be unblinded.
 */
public class UnblindBlindedSignatureRequest {
  public static final String SERIALIZED_NAME_CLAIM_TYPES = "claimTypes";
  @SerializedName(SERIALIZED_NAME_CLAIM_TYPES)
  @javax.annotation.Nonnull
  private List<ClaimType> claimTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLINDED_INDICES_AND_VALUES = "blindedIndicesAndValues";
  @SerializedName(SERIALIZED_NAME_BLINDED_INDICES_AND_VALUES)
  @javax.annotation.Nonnull
  private List<CredAttrIndexAndDataValue> blindedIndicesAndValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLIND_SIGNATURE = "blindSignature";
  @SerializedName(SERIALIZED_NAME_BLIND_SIGNATURE)
  @javax.annotation.Nonnull
  private String blindSignature;

  public static final String SERIALIZED_NAME_INFO_FOR_UNBLINDING = "infoForUnblinding";
  @SerializedName(SERIALIZED_NAME_INFO_FOR_UNBLINDING)
  @javax.annotation.Nonnull
  private String infoForUnblinding;

  public UnblindBlindedSignatureRequest() {
  }

  public UnblindBlindedSignatureRequest claimTypes(@javax.annotation.Nonnull List<ClaimType> claimTypes) {
    this.claimTypes = claimTypes;
    return this;
  }

  public UnblindBlindedSignatureRequest addClaimTypesItem(ClaimType claimTypesItem) {
    if (this.claimTypes == null) {
      this.claimTypes = new ArrayList<>();
    }
    this.claimTypes.add(claimTypesItem);
    return this;
  }

  /**
   * The schema.
   * @return claimTypes
   */
  @javax.annotation.Nonnull
  public List<ClaimType> getClaimTypes() {
    return claimTypes;
  }

  public void setClaimTypes(@javax.annotation.Nonnull List<ClaimType> claimTypes) {
    this.claimTypes = claimTypes;
  }


  public UnblindBlindedSignatureRequest blindedIndicesAndValues(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedIndicesAndValues) {
    this.blindedIndicesAndValues = blindedIndicesAndValues;
    return this;
  }

  public UnblindBlindedSignatureRequest addBlindedIndicesAndValuesItem(CredAttrIndexAndDataValue blindedIndicesAndValuesItem) {
    if (this.blindedIndicesAndValues == null) {
      this.blindedIndicesAndValues = new ArrayList<>();
    }
    this.blindedIndicesAndValues.add(blindedIndicesAndValuesItem);
    return this;
  }

  /**
   * Blinded attributes. Same as used for CreateBlindSigningInfoRequest.
   * @return blindedIndicesAndValues
   */
  @javax.annotation.Nonnull
  public List<CredAttrIndexAndDataValue> getBlindedIndicesAndValues() {
    return blindedIndicesAndValues;
  }

  public void setBlindedIndicesAndValues(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedIndicesAndValues) {
    this.blindedIndicesAndValues = blindedIndicesAndValues;
  }


  public UnblindBlindedSignatureRequest blindSignature(@javax.annotation.Nonnull String blindSignature) {
    this.blindSignature = blindSignature;
    return this;
  }

  /**
   * The signature to be unblinded.
   * @return blindSignature
   */
  @javax.annotation.Nonnull
  public String getBlindSignature() {
    return blindSignature;
  }

  public void setBlindSignature(@javax.annotation.Nonnull String blindSignature) {
    this.blindSignature = blindSignature;
  }


  public UnblindBlindedSignatureRequest infoForUnblinding(@javax.annotation.Nonnull String infoForUnblinding) {
    this.infoForUnblinding = infoForUnblinding;
    return this;
  }

  /**
   * See InfoForUnblinding.
   * @return infoForUnblinding
   */
  @javax.annotation.Nonnull
  public String getInfoForUnblinding() {
    return infoForUnblinding;
  }

  public void setInfoForUnblinding(@javax.annotation.Nonnull String infoForUnblinding) {
    this.infoForUnblinding = infoForUnblinding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnblindBlindedSignatureRequest unblindBlindedSignatureRequest = (UnblindBlindedSignatureRequest) o;
    return Objects.equals(this.claimTypes, unblindBlindedSignatureRequest.claimTypes) &&
        Objects.equals(this.blindedIndicesAndValues, unblindBlindedSignatureRequest.blindedIndicesAndValues) &&
        Objects.equals(this.blindSignature, unblindBlindedSignatureRequest.blindSignature) &&
        Objects.equals(this.infoForUnblinding, unblindBlindedSignatureRequest.infoForUnblinding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimTypes, blindedIndicesAndValues, blindSignature, infoForUnblinding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnblindBlindedSignatureRequest {\n");
    sb.append("    claimTypes: ").append(toIndentedString(claimTypes)).append("\n");
    sb.append("    blindedIndicesAndValues: ").append(toIndentedString(blindedIndicesAndValues)).append("\n");
    sb.append("    blindSignature: ").append(toIndentedString(blindSignature)).append("\n");
    sb.append("    infoForUnblinding: ").append(toIndentedString(infoForUnblinding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimTypes");
    openapiFields.add("blindedIndicesAndValues");
    openapiFields.add("blindSignature");
    openapiFields.add("infoForUnblinding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("claimTypes");
    openapiRequiredFields.add("blindedIndicesAndValues");
    openapiRequiredFields.add("blindSignature");
    openapiRequiredFields.add("infoForUnblinding");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnblindBlindedSignatureRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnblindBlindedSignatureRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnblindBlindedSignatureRequest is not found in the empty JSON string", UnblindBlindedSignatureRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnblindBlindedSignatureRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnblindBlindedSignatureRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UnblindBlindedSignatureRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("claimTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("claimTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimTypes` to be an array in the JSON string but got `%s`", jsonObj.get("claimTypes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("blindedIndicesAndValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindedIndicesAndValues` to be an array in the JSON string but got `%s`", jsonObj.get("blindedIndicesAndValues").toString()));
      }

      JsonArray jsonArrayblindedIndicesAndValues = jsonObj.getAsJsonArray("blindedIndicesAndValues");
      // validate the required field `blindedIndicesAndValues` (array)
      for (int i = 0; i < jsonArrayblindedIndicesAndValues.size(); i++) {
        CredAttrIndexAndDataValue.validateJsonElement(jsonArrayblindedIndicesAndValues.get(i));
      };
      if (!jsonObj.get("blindSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blindSignature").toString()));
      }
      if (!jsonObj.get("infoForUnblinding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoForUnblinding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoForUnblinding").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnblindBlindedSignatureRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnblindBlindedSignatureRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnblindBlindedSignatureRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnblindBlindedSignatureRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UnblindBlindedSignatureRequest>() {
           @Override
           public void write(JsonWriter out, UnblindBlindedSignatureRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnblindBlindedSignatureRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnblindBlindedSignatureRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnblindBlindedSignatureRequest
   * @throws IOException if the JSON string is invalid with respect to UnblindBlindedSignatureRequest
   */
  public static UnblindBlindedSignatureRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnblindBlindedSignatureRequest.class);
  }

  /**
   * Convert an instance of UnblindBlindedSignatureRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

