/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.CredAttrIndexAndDataValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * BlindSigningInfo
 */
public class BlindSigningInfo {
  public static final String SERIALIZED_NAME_BLIND_INFO_FOR_SIGNER = "blindInfoForSigner";
  @SerializedName(SERIALIZED_NAME_BLIND_INFO_FOR_SIGNER)
  @javax.annotation.Nonnull
  private String blindInfoForSigner;

  public static final String SERIALIZED_NAME_BLINDED_ATTRIBUTES = "blindedAttributes";
  @SerializedName(SERIALIZED_NAME_BLINDED_ATTRIBUTES)
  @javax.annotation.Nonnull
  private List<CredAttrIndexAndDataValue> blindedAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_FOR_UNBLINDING = "infoForUnblinding";
  @SerializedName(SERIALIZED_NAME_INFO_FOR_UNBLINDING)
  @javax.annotation.Nonnull
  private String infoForUnblinding;

  public BlindSigningInfo() {
  }

  public BlindSigningInfo blindInfoForSigner(@javax.annotation.Nonnull String blindInfoForSigner) {
    this.blindInfoForSigner = blindInfoForSigner;
    return this;
  }

  /**
   * Info sent by requester to Signer to create blind signature
   * @return blindInfoForSigner
   */
  @javax.annotation.Nonnull
  public String getBlindInfoForSigner() {
    return blindInfoForSigner;
  }

  public void setBlindInfoForSigner(@javax.annotation.Nonnull String blindInfoForSigner) {
    this.blindInfoForSigner = blindInfoForSigner;
  }


  public BlindSigningInfo blindedAttributes(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedAttributes) {
    this.blindedAttributes = blindedAttributes;
    return this;
  }

  public BlindSigningInfo addBlindedAttributesItem(CredAttrIndexAndDataValue blindedAttributesItem) {
    if (this.blindedAttributes == null) {
      this.blindedAttributes = new ArrayList<>();
    }
    this.blindedAttributes.add(blindedAttributesItem);
    return this;
  }

  /**
   * Get blindedAttributes
   * @return blindedAttributes
   */
  @javax.annotation.Nonnull
  public List<CredAttrIndexAndDataValue> getBlindedAttributes() {
    return blindedAttributes;
  }

  public void setBlindedAttributes(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedAttributes) {
    this.blindedAttributes = blindedAttributes;
  }


  public BlindSigningInfo infoForUnblinding(@javax.annotation.Nonnull String infoForUnblinding) {
    this.infoForUnblinding = infoForUnblinding;
    return this;
  }

  /**
   * Data retained by requester to unblind blind signature
   * @return infoForUnblinding
   */
  @javax.annotation.Nonnull
  public String getInfoForUnblinding() {
    return infoForUnblinding;
  }

  public void setInfoForUnblinding(@javax.annotation.Nonnull String infoForUnblinding) {
    this.infoForUnblinding = infoForUnblinding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlindSigningInfo blindSigningInfo = (BlindSigningInfo) o;
    return Objects.equals(this.blindInfoForSigner, blindSigningInfo.blindInfoForSigner) &&
        Objects.equals(this.blindedAttributes, blindSigningInfo.blindedAttributes) &&
        Objects.equals(this.infoForUnblinding, blindSigningInfo.infoForUnblinding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blindInfoForSigner, blindedAttributes, infoForUnblinding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlindSigningInfo {\n");
    sb.append("    blindInfoForSigner: ").append(toIndentedString(blindInfoForSigner)).append("\n");
    sb.append("    blindedAttributes: ").append(toIndentedString(blindedAttributes)).append("\n");
    sb.append("    infoForUnblinding: ").append(toIndentedString(infoForUnblinding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blindInfoForSigner");
    openapiFields.add("blindedAttributes");
    openapiFields.add("infoForUnblinding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blindInfoForSigner");
    openapiRequiredFields.add("blindedAttributes");
    openapiRequiredFields.add("infoForUnblinding");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlindSigningInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlindSigningInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlindSigningInfo is not found in the empty JSON string", BlindSigningInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlindSigningInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlindSigningInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlindSigningInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("blindInfoForSigner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindInfoForSigner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blindInfoForSigner").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("blindedAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("blindedAttributes").toString()));
      }

      JsonArray jsonArrayblindedAttributes = jsonObj.getAsJsonArray("blindedAttributes");
      // validate the required field `blindedAttributes` (array)
      for (int i = 0; i < jsonArrayblindedAttributes.size(); i++) {
        CredAttrIndexAndDataValue.validateJsonElement(jsonArrayblindedAttributes.get(i));
      };
      if (!jsonObj.get("infoForUnblinding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoForUnblinding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoForUnblinding").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlindSigningInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlindSigningInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlindSigningInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlindSigningInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BlindSigningInfo>() {
           @Override
           public void write(JsonWriter out, BlindSigningInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlindSigningInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlindSigningInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlindSigningInfo
   * @throws IOException if the JSON string is invalid with respect to BlindSigningInfo
   */
  public static BlindSigningInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlindSigningInfo.class);
  }

  /**
   * Convert an instance of BlindSigningInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

