/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.AccumulatorData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Elements (if any) to be added to, and elements (if any) to be removed from an accumulator.
 */
public class AccumulatorAddRemoveRequest {
  public static final String SERIALIZED_NAME_ACCUMULATOR_DATA = "accumulatorData";
  @SerializedName(SERIALIZED_NAME_ACCUMULATOR_DATA)
  @javax.annotation.Nonnull
  private AccumulatorData accumulatorData;

  public static final String SERIALIZED_NAME_ACCUMULATOR = "accumulator";
  @SerializedName(SERIALIZED_NAME_ACCUMULATOR)
  @javax.annotation.Nonnull
  private String accumulator;

  public static final String SERIALIZED_NAME_ADDITIONS = "additions";
  @SerializedName(SERIALIZED_NAME_ADDITIONS)
  @javax.annotation.Nonnull
  private Map<String, String> additions = new HashMap<>();

  public static final String SERIALIZED_NAME_REMOVALS = "removals";
  @SerializedName(SERIALIZED_NAME_REMOVALS)
  @javax.annotation.Nonnull
  private List<String> removals = new ArrayList<>();

  public AccumulatorAddRemoveRequest() {
  }

  public AccumulatorAddRemoveRequest accumulatorData(@javax.annotation.Nonnull AccumulatorData accumulatorData) {
    this.accumulatorData = accumulatorData;
    return this;
  }

  /**
   * See Accumulator Data.
   * @return accumulatorData
   */
  @javax.annotation.Nonnull
  public AccumulatorData getAccumulatorData() {
    return accumulatorData;
  }

  public void setAccumulatorData(@javax.annotation.Nonnull AccumulatorData accumulatorData) {
    this.accumulatorData = accumulatorData;
  }


  public AccumulatorAddRemoveRequest accumulator(@javax.annotation.Nonnull String accumulator) {
    this.accumulator = accumulator;
    return this;
  }

  /**
   * See Accumulator.
   * @return accumulator
   */
  @javax.annotation.Nonnull
  public String getAccumulator() {
    return accumulator;
  }

  public void setAccumulator(@javax.annotation.Nonnull String accumulator) {
    this.accumulator = accumulator;
  }


  public AccumulatorAddRemoveRequest additions(@javax.annotation.Nonnull Map<String, String> additions) {
    this.additions = additions;
    return this;
  }

  public AccumulatorAddRemoveRequest putAdditionsItem(String key, String additionsItem) {
    if (this.additions == null) {
      this.additions = new HashMap<>();
    }
    this.additions.put(key, additionsItem);
    return this;
  }

  /**
   * Elements to be added. This is a map associating each element to be added with an (ephemeral) ID that can be used by the requester (e.g., Signer/Issuer) to determine who should receive the returned witness.
   * @return additions
   */
  @javax.annotation.Nonnull
  public Map<String, String> getAdditions() {
    return additions;
  }

  public void setAdditions(@javax.annotation.Nonnull Map<String, String> additions) {
    this.additions = additions;
  }


  public AccumulatorAddRemoveRequest removals(@javax.annotation.Nonnull List<String> removals) {
    this.removals = removals;
    return this;
  }

  public AccumulatorAddRemoveRequest addRemovalsItem(String removalsItem) {
    if (this.removals == null) {
      this.removals = new ArrayList<>();
    }
    this.removals.add(removalsItem);
    return this;
  }

  /**
   * Elements to be removed.
   * @return removals
   */
  @javax.annotation.Nonnull
  public List<String> getRemovals() {
    return removals;
  }

  public void setRemovals(@javax.annotation.Nonnull List<String> removals) {
    this.removals = removals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccumulatorAddRemoveRequest accumulatorAddRemoveRequest = (AccumulatorAddRemoveRequest) o;
    return Objects.equals(this.accumulatorData, accumulatorAddRemoveRequest.accumulatorData) &&
        Objects.equals(this.accumulator, accumulatorAddRemoveRequest.accumulator) &&
        Objects.equals(this.additions, accumulatorAddRemoveRequest.additions) &&
        Objects.equals(this.removals, accumulatorAddRemoveRequest.removals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accumulatorData, accumulator, additions, removals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccumulatorAddRemoveRequest {\n");
    sb.append("    accumulatorData: ").append(toIndentedString(accumulatorData)).append("\n");
    sb.append("    accumulator: ").append(toIndentedString(accumulator)).append("\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("    removals: ").append(toIndentedString(removals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accumulatorData");
    openapiFields.add("accumulator");
    openapiFields.add("additions");
    openapiFields.add("removals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accumulatorData");
    openapiRequiredFields.add("accumulator");
    openapiRequiredFields.add("additions");
    openapiRequiredFields.add("removals");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccumulatorAddRemoveRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccumulatorAddRemoveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccumulatorAddRemoveRequest is not found in the empty JSON string", AccumulatorAddRemoveRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccumulatorAddRemoveRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccumulatorAddRemoveRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccumulatorAddRemoveRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `accumulatorData`
      AccumulatorData.validateJsonElement(jsonObj.get("accumulatorData"));
      if (!jsonObj.get("accumulator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulator").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("removals") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("removals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removals` to be an array in the JSON string but got `%s`", jsonObj.get("removals").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccumulatorAddRemoveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccumulatorAddRemoveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccumulatorAddRemoveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccumulatorAddRemoveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccumulatorAddRemoveRequest>() {
           @Override
           public void write(JsonWriter out, AccumulatorAddRemoveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccumulatorAddRemoveRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccumulatorAddRemoveRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccumulatorAddRemoveRequest
   * @throws IOException if the JSON string is invalid with respect to AccumulatorAddRemoveRequest
   */
  public static AccumulatorAddRemoveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccumulatorAddRemoveRequest.class);
  }

  /**
   * Convert an instance of AccumulatorAddRemoveRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

