/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.CredentialReqs;
import com.example.vcp.client.model.SharedParamValue;
import com.example.vcp.client.model.SignatureAndRelatedData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Information used for creating a proof.
 */
public class CreateProofRequest {
  public static final String SERIALIZED_NAME_PROOF_REQS = "proofReqs";
  @SerializedName(SERIALIZED_NAME_PROOF_REQS)
  @javax.annotation.Nonnull
  private Map<String, CredentialReqs> proofReqs = new HashMap<>();

  public static final String SERIALIZED_NAME_SHARED_PARAMS = "sharedParams";
  @SerializedName(SERIALIZED_NAME_SHARED_PARAMS)
  @javax.annotation.Nonnull
  private Map<String, SharedParamValue> sharedParams = new HashMap<>();

  public static final String SERIALIZED_NAME_SIGS_AND_RELATED_DATA = "sigsAndRelatedData";
  @SerializedName(SERIALIZED_NAME_SIGS_AND_RELATED_DATA)
  @javax.annotation.Nonnull
  private Map<String, SignatureAndRelatedData> sigsAndRelatedData = new HashMap<>();

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  @javax.annotation.Nonnull
  private String nonce;

  public CreateProofRequest() {
  }

  public CreateProofRequest proofReqs(@javax.annotation.Nonnull Map<String, CredentialReqs> proofReqs) {
    this.proofReqs = proofReqs;
    return this;
  }

  public CreateProofRequest putProofReqsItem(String key, CredentialReqs proofReqsItem) {
    if (this.proofReqs == null) {
      this.proofReqs = new HashMap<>();
    }
    this.proofReqs.put(key, proofReqsItem);
    return this;
  }

  /**
   * Proof requirements as specified by the Verifier.
   * @return proofReqs
   */
  @javax.annotation.Nonnull
  public Map<String, CredentialReqs> getProofReqs() {
    return proofReqs;
  }

  public void setProofReqs(@javax.annotation.Nonnull Map<String, CredentialReqs> proofReqs) {
    this.proofReqs = proofReqs;
  }


  public CreateProofRequest sharedParams(@javax.annotation.Nonnull Map<String, SharedParamValue> sharedParams) {
    this.sharedParams = sharedParams;
    return this;
  }

  public CreateProofRequest putSharedParamsItem(String key, SharedParamValue sharedParamsItem) {
    if (this.sharedParams == null) {
      this.sharedParams = new HashMap<>();
    }
    this.sharedParams.put(key, sharedParamsItem);
    return this;
  }

  /**
   * A map of parameter names to values (e.g., public keys).
   * @return sharedParams
   */
  @javax.annotation.Nonnull
  public Map<String, SharedParamValue> getSharedParams() {
    return sharedParams;
  }

  public void setSharedParams(@javax.annotation.Nonnull Map<String, SharedParamValue> sharedParams) {
    this.sharedParams = sharedParams;
  }


  public CreateProofRequest sigsAndRelatedData(@javax.annotation.Nonnull Map<String, SignatureAndRelatedData> sigsAndRelatedData) {
    this.sigsAndRelatedData = sigsAndRelatedData;
    return this;
  }

  public CreateProofRequest putSigsAndRelatedDataItem(String key, SignatureAndRelatedData sigsAndRelatedDataItem) {
    if (this.sigsAndRelatedData == null) {
      this.sigsAndRelatedData = new HashMap<>();
    }
    this.sigsAndRelatedData.put(key, sigsAndRelatedDataItem);
    return this;
  }

  /**
   * A map of credential labels to SignatureAndRelatedData.
   * @return sigsAndRelatedData
   */
  @javax.annotation.Nonnull
  public Map<String, SignatureAndRelatedData> getSigsAndRelatedData() {
    return sigsAndRelatedData;
  }

  public void setSigsAndRelatedData(@javax.annotation.Nonnull Map<String, SignatureAndRelatedData> sigsAndRelatedData) {
    this.sigsAndRelatedData = sigsAndRelatedData;
  }


  public CreateProofRequest nonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Arbitrary text.
   * @return nonce
   */
  @javax.annotation.Nonnull
  public String getNonce() {
    return nonce;
  }

  public void setNonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProofRequest createProofRequest = (CreateProofRequest) o;
    return Objects.equals(this.proofReqs, createProofRequest.proofReqs) &&
        Objects.equals(this.sharedParams, createProofRequest.sharedParams) &&
        Objects.equals(this.sigsAndRelatedData, createProofRequest.sigsAndRelatedData) &&
        Objects.equals(this.nonce, createProofRequest.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proofReqs, sharedParams, sigsAndRelatedData, nonce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProofRequest {\n");
    sb.append("    proofReqs: ").append(toIndentedString(proofReqs)).append("\n");
    sb.append("    sharedParams: ").append(toIndentedString(sharedParams)).append("\n");
    sb.append("    sigsAndRelatedData: ").append(toIndentedString(sigsAndRelatedData)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("proofReqs");
    openapiFields.add("sharedParams");
    openapiFields.add("sigsAndRelatedData");
    openapiFields.add("nonce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("proofReqs");
    openapiRequiredFields.add("sharedParams");
    openapiRequiredFields.add("sigsAndRelatedData");
    openapiRequiredFields.add("nonce");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProofRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProofRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProofRequest is not found in the empty JSON string", CreateProofRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProofRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProofRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProofRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProofRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProofRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProofRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProofRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProofRequest>() {
           @Override
           public void write(JsonWriter out, CreateProofRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProofRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProofRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProofRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProofRequest
   */
  public static CreateProofRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProofRequest.class);
  }

  /**
   * Convert an instance of CreateProofRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

