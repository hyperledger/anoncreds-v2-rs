/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.DecryptResponse;
import com.example.vcp.client.model.Warning;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Returned from &#39;verifyProof&#39; if the given proof is valid.
 */
public class WarningsAndDecryptResponses {
  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  @javax.annotation.Nonnull
  private List<Warning> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECRYPT_RESPONSES = "decryptResponses";
  @SerializedName(SERIALIZED_NAME_DECRYPT_RESPONSES)
  @javax.annotation.Nonnull
  private Map<String, Map<String, Map<String, DecryptResponse>>> decryptResponses = new HashMap<>();

  public WarningsAndDecryptResponses() {
  }

  public WarningsAndDecryptResponses warnings(@javax.annotation.Nonnull List<Warning> warnings) {
    this.warnings = warnings;
    return this;
  }

  public WarningsAndDecryptResponses addWarningsItem(Warning warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Warnings, e.g., unsupported features, potentially unintended requests, etc.
   * @return warnings
   */
  @javax.annotation.Nonnull
  public List<Warning> getWarnings() {
    return warnings;
  }

  public void setWarnings(@javax.annotation.Nonnull List<Warning> warnings) {
    this.warnings = warnings;
  }


  public WarningsAndDecryptResponses decryptResponses(@javax.annotation.Nonnull Map<String, Map<String, Map<String, DecryptResponse>>> decryptResponses) {
    this.decryptResponses = decryptResponses;
    return this;
  }

  public WarningsAndDecryptResponses putDecryptResponsesItem(String key, Map<String, Map<String, DecryptResponse>> decryptResponsesItem) {
    if (this.decryptResponses == null) {
      this.decryptResponses = new HashMap<>();
    }
    this.decryptResponses.put(key, decryptResponsesItem);
    return this;
  }

  /**
   * Data values decrypted (three-level map keyed by CredentialLabel, CredAttrIndex and AuthorityLabel).
   * @return decryptResponses
   */
  @javax.annotation.Nonnull
  public Map<String, Map<String, Map<String, DecryptResponse>>> getDecryptResponses() {
    return decryptResponses;
  }

  public void setDecryptResponses(@javax.annotation.Nonnull Map<String, Map<String, Map<String, DecryptResponse>>> decryptResponses) {
    this.decryptResponses = decryptResponses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarningsAndDecryptResponses warningsAndDecryptResponses = (WarningsAndDecryptResponses) o;
    return Objects.equals(this.warnings, warningsAndDecryptResponses.warnings) &&
        Objects.equals(this.decryptResponses, warningsAndDecryptResponses.decryptResponses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warnings, decryptResponses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarningsAndDecryptResponses {\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    decryptResponses: ").append(toIndentedString(decryptResponses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("warnings");
    openapiFields.add("decryptResponses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("warnings");
    openapiRequiredFields.add("decryptResponses");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WarningsAndDecryptResponses
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WarningsAndDecryptResponses.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WarningsAndDecryptResponses is not found in the empty JSON string", WarningsAndDecryptResponses.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WarningsAndDecryptResponses.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WarningsAndDecryptResponses` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WarningsAndDecryptResponses.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }

      JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
      // validate the required field `warnings` (array)
      for (int i = 0; i < jsonArraywarnings.size(); i++) {
        Warning.validateJsonElement(jsonArraywarnings.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WarningsAndDecryptResponses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WarningsAndDecryptResponses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WarningsAndDecryptResponses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WarningsAndDecryptResponses.class));

       return (TypeAdapter<T>) new TypeAdapter<WarningsAndDecryptResponses>() {
           @Override
           public void write(JsonWriter out, WarningsAndDecryptResponses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WarningsAndDecryptResponses read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WarningsAndDecryptResponses given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WarningsAndDecryptResponses
   * @throws IOException if the JSON string is invalid with respect to WarningsAndDecryptResponses
   */
  public static WarningsAndDecryptResponses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WarningsAndDecryptResponses.class);
  }

  /**
   * Convert an instance of WarningsAndDecryptResponses to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

