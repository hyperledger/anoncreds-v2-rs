/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Used to prove accumulator membership.
 */
public class InAccumInfo {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nonnull
  private Integer index;

  public static final String SERIALIZED_NAME_ACCUMULATOR_PUBLIC_DATA_LABEL = "accumulatorPublicDataLabel";
  @SerializedName(SERIALIZED_NAME_ACCUMULATOR_PUBLIC_DATA_LABEL)
  @javax.annotation.Nonnull
  private String accumulatorPublicDataLabel;

  public static final String SERIALIZED_NAME_MEMBERSHIP_PROVING_KEY_LABEL = "membershipProvingKeyLabel";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_PROVING_KEY_LABEL)
  @javax.annotation.Nonnull
  private String membershipProvingKeyLabel;

  public static final String SERIALIZED_NAME_ACCUMULATOR_LABEL = "accumulatorLabel";
  @SerializedName(SERIALIZED_NAME_ACCUMULATOR_LABEL)
  @javax.annotation.Nonnull
  private String accumulatorLabel;

  public static final String SERIALIZED_NAME_ACCUMULATOR_SEQ_NUM_LABEL = "accumulatorSeqNumLabel";
  @SerializedName(SERIALIZED_NAME_ACCUMULATOR_SEQ_NUM_LABEL)
  @javax.annotation.Nonnull
  private String accumulatorSeqNumLabel;

  public InAccumInfo() {
  }

  public InAccumInfo index(@javax.annotation.Nonnull Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Indicates which attribute is to be proved present in an accumulator.
   * minimum: 0
   * @return index
   */
  @javax.annotation.Nonnull
  public Integer getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nonnull Integer index) {
    this.index = index;
  }


  public InAccumInfo accumulatorPublicDataLabel(@javax.annotation.Nonnull String accumulatorPublicDataLabel) {
    this.accumulatorPublicDataLabel = accumulatorPublicDataLabel;
    return this;
  }

  /**
   * A key into SharedParams to obtain an accumulator&#39;s public keys.
   * @return accumulatorPublicDataLabel
   */
  @javax.annotation.Nonnull
  public String getAccumulatorPublicDataLabel() {
    return accumulatorPublicDataLabel;
  }

  public void setAccumulatorPublicDataLabel(@javax.annotation.Nonnull String accumulatorPublicDataLabel) {
    this.accumulatorPublicDataLabel = accumulatorPublicDataLabel;
  }


  public InAccumInfo membershipProvingKeyLabel(@javax.annotation.Nonnull String membershipProvingKeyLabel) {
    this.membershipProvingKeyLabel = membershipProvingKeyLabel;
    return this;
  }

  /**
   * A key into SharedParams to obtain a MembershipProvingKey.
   * @return membershipProvingKeyLabel
   */
  @javax.annotation.Nonnull
  public String getMembershipProvingKeyLabel() {
    return membershipProvingKeyLabel;
  }

  public void setMembershipProvingKeyLabel(@javax.annotation.Nonnull String membershipProvingKeyLabel) {
    this.membershipProvingKeyLabel = membershipProvingKeyLabel;
  }


  public InAccumInfo accumulatorLabel(@javax.annotation.Nonnull String accumulatorLabel) {
    this.accumulatorLabel = accumulatorLabel;
    return this;
  }

  /**
   * A key into SharedParams to obtain an Accumulator value.
   * @return accumulatorLabel
   */
  @javax.annotation.Nonnull
  public String getAccumulatorLabel() {
    return accumulatorLabel;
  }

  public void setAccumulatorLabel(@javax.annotation.Nonnull String accumulatorLabel) {
    this.accumulatorLabel = accumulatorLabel;
  }


  public InAccumInfo accumulatorSeqNumLabel(@javax.annotation.Nonnull String accumulatorSeqNumLabel) {
    this.accumulatorSeqNumLabel = accumulatorSeqNumLabel;
    return this;
  }

  /**
   * A key into SharedParams to obtain a sequence number. A holder needs this to find the appropriate witness.
   * @return accumulatorSeqNumLabel
   */
  @javax.annotation.Nonnull
  public String getAccumulatorSeqNumLabel() {
    return accumulatorSeqNumLabel;
  }

  public void setAccumulatorSeqNumLabel(@javax.annotation.Nonnull String accumulatorSeqNumLabel) {
    this.accumulatorSeqNumLabel = accumulatorSeqNumLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InAccumInfo inAccumInfo = (InAccumInfo) o;
    return Objects.equals(this.index, inAccumInfo.index) &&
        Objects.equals(this.accumulatorPublicDataLabel, inAccumInfo.accumulatorPublicDataLabel) &&
        Objects.equals(this.membershipProvingKeyLabel, inAccumInfo.membershipProvingKeyLabel) &&
        Objects.equals(this.accumulatorLabel, inAccumInfo.accumulatorLabel) &&
        Objects.equals(this.accumulatorSeqNumLabel, inAccumInfo.accumulatorSeqNumLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, accumulatorPublicDataLabel, membershipProvingKeyLabel, accumulatorLabel, accumulatorSeqNumLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InAccumInfo {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    accumulatorPublicDataLabel: ").append(toIndentedString(accumulatorPublicDataLabel)).append("\n");
    sb.append("    membershipProvingKeyLabel: ").append(toIndentedString(membershipProvingKeyLabel)).append("\n");
    sb.append("    accumulatorLabel: ").append(toIndentedString(accumulatorLabel)).append("\n");
    sb.append("    accumulatorSeqNumLabel: ").append(toIndentedString(accumulatorSeqNumLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("accumulatorPublicDataLabel");
    openapiFields.add("membershipProvingKeyLabel");
    openapiFields.add("accumulatorLabel");
    openapiFields.add("accumulatorSeqNumLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("index");
    openapiRequiredFields.add("accumulatorPublicDataLabel");
    openapiRequiredFields.add("membershipProvingKeyLabel");
    openapiRequiredFields.add("accumulatorLabel");
    openapiRequiredFields.add("accumulatorSeqNumLabel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InAccumInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InAccumInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InAccumInfo is not found in the empty JSON string", InAccumInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InAccumInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InAccumInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InAccumInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accumulatorPublicDataLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulatorPublicDataLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulatorPublicDataLabel").toString()));
      }
      if (!jsonObj.get("membershipProvingKeyLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipProvingKeyLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipProvingKeyLabel").toString()));
      }
      if (!jsonObj.get("accumulatorLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulatorLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulatorLabel").toString()));
      }
      if (!jsonObj.get("accumulatorSeqNumLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accumulatorSeqNumLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accumulatorSeqNumLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InAccumInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InAccumInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InAccumInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InAccumInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<InAccumInfo>() {
           @Override
           public void write(JsonWriter out, InAccumInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InAccumInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InAccumInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InAccumInfo
   * @throws IOException if the JSON string is invalid with respect to InAccumInfo
   */
  public static InAccumInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InAccumInfo.class);
  }

  /**
   * Convert an instance of InAccumInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

