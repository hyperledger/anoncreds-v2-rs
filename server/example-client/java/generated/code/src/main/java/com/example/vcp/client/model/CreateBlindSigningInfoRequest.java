/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.model;

import java.util.Objects;
import com.example.vcp.client.model.CredAttrIndexAndDataValue;
import com.example.vcp.client.model.SignerPublicData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.example.vcp.client.JSON;

/**
 * Supplies the attribute indices and values to be blinded. The indices must match the indices given to createSignerData.
 */
public class CreateBlindSigningInfoRequest {
  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_DATA = "signerPublicData";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_DATA)
  @javax.annotation.Nonnull
  private SignerPublicData signerPublicData;

  public static final String SERIALIZED_NAME_BLINDED_INDICES_AND_VALUES = "blindedIndicesAndValues";
  @SerializedName(SERIALIZED_NAME_BLINDED_INDICES_AND_VALUES)
  @javax.annotation.Nonnull
  private List<CredAttrIndexAndDataValue> blindedIndicesAndValues = new ArrayList<>();

  public CreateBlindSigningInfoRequest() {
  }

  public CreateBlindSigningInfoRequest signerPublicData(@javax.annotation.Nonnull SignerPublicData signerPublicData) {
    this.signerPublicData = signerPublicData;
    return this;
  }

  /**
   * See SignerPublicData.
   * @return signerPublicData
   */
  @javax.annotation.Nonnull
  public SignerPublicData getSignerPublicData() {
    return signerPublicData;
  }

  public void setSignerPublicData(@javax.annotation.Nonnull SignerPublicData signerPublicData) {
    this.signerPublicData = signerPublicData;
  }


  public CreateBlindSigningInfoRequest blindedIndicesAndValues(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedIndicesAndValues) {
    this.blindedIndicesAndValues = blindedIndicesAndValues;
    return this;
  }

  public CreateBlindSigningInfoRequest addBlindedIndicesAndValuesItem(CredAttrIndexAndDataValue blindedIndicesAndValuesItem) {
    if (this.blindedIndicesAndValues == null) {
      this.blindedIndicesAndValues = new ArrayList<>();
    }
    this.blindedIndicesAndValues.add(blindedIndicesAndValuesItem);
    return this;
  }

  /**
   * The values to be blind signed.
   * @return blindedIndicesAndValues
   */
  @javax.annotation.Nonnull
  public List<CredAttrIndexAndDataValue> getBlindedIndicesAndValues() {
    return blindedIndicesAndValues;
  }

  public void setBlindedIndicesAndValues(@javax.annotation.Nonnull List<CredAttrIndexAndDataValue> blindedIndicesAndValues) {
    this.blindedIndicesAndValues = blindedIndicesAndValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBlindSigningInfoRequest createBlindSigningInfoRequest = (CreateBlindSigningInfoRequest) o;
    return Objects.equals(this.signerPublicData, createBlindSigningInfoRequest.signerPublicData) &&
        Objects.equals(this.blindedIndicesAndValues, createBlindSigningInfoRequest.blindedIndicesAndValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerPublicData, blindedIndicesAndValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBlindSigningInfoRequest {\n");
    sb.append("    signerPublicData: ").append(toIndentedString(signerPublicData)).append("\n");
    sb.append("    blindedIndicesAndValues: ").append(toIndentedString(blindedIndicesAndValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signerPublicData");
    openapiFields.add("blindedIndicesAndValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signerPublicData");
    openapiRequiredFields.add("blindedIndicesAndValues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBlindSigningInfoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBlindSigningInfoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBlindSigningInfoRequest is not found in the empty JSON string", CreateBlindSigningInfoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBlindSigningInfoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBlindSigningInfoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBlindSigningInfoRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `signerPublicData`
      SignerPublicData.validateJsonElement(jsonObj.get("signerPublicData"));
      // ensure the json data is an array
      if (!jsonObj.get("blindedIndicesAndValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blindedIndicesAndValues` to be an array in the JSON string but got `%s`", jsonObj.get("blindedIndicesAndValues").toString()));
      }

      JsonArray jsonArrayblindedIndicesAndValues = jsonObj.getAsJsonArray("blindedIndicesAndValues");
      // validate the required field `blindedIndicesAndValues` (array)
      for (int i = 0; i < jsonArrayblindedIndicesAndValues.size(); i++) {
        CredAttrIndexAndDataValue.validateJsonElement(jsonArrayblindedIndicesAndValues.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBlindSigningInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBlindSigningInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBlindSigningInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBlindSigningInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBlindSigningInfoRequest>() {
           @Override
           public void write(JsonWriter out, CreateBlindSigningInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBlindSigningInfoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBlindSigningInfoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBlindSigningInfoRequest
   * @throws IOException if the JSON string is invalid with respect to CreateBlindSigningInfoRequest
   */
  public static CreateBlindSigningInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBlindSigningInfoRequest.class);
  }

  /**
   * Convert an instance of CreateBlindSigningInfoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

