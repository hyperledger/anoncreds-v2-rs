/*
 * vcp_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.vcp.client.api;

import com.example.vcp.client.ApiCallback;
import com.example.vcp.client.ApiClient;
import com.example.vcp.client.ApiException;
import com.example.vcp.client.ApiResponse;
import com.example.vcp.client.Configuration;
import com.example.vcp.client.Pair;
import com.example.vcp.client.ProgressRequestBody;
import com.example.vcp.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.example.vcp.client.model.AccumulatorAddRemoveRequest;
import com.example.vcp.client.model.AccumulatorAddRemoveResponse;
import com.example.vcp.client.model.AuthorityData;
import com.example.vcp.client.model.ClaimType;
import com.example.vcp.client.model.CreateAccumulatorResponse;
import com.example.vcp.client.model.CreateProofRequest;
import com.example.vcp.client.model.Error;
import com.example.vcp.client.model.SignRequest;
import com.example.vcp.client.model.SignerData;
import com.example.vcp.client.model.UpdateAccumulatorWitnessRequest;
import com.example.vcp.client.model.VerifyDecryptionRequest;
import com.example.vcp.client.model.VerifyProofRequest;
import com.example.vcp.client.model.Warning;
import com.example.vcp.client.model.WarningsAndDataForVerifier;
import com.example.vcp.client.model.WarningsAndDecryptResponses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accumulatorAddRemove
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param accumulatorAddRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accumulatorAddRemoveCall(String zkpLib, AccumulatorAddRemoveRequest accumulatorAddRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accumulatorAddRemoveRequest;

        // create path and map variables
        String localVarPath = "/vcp/accumulatorAddRemove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accumulatorAddRemoveValidateBeforeCall(String zkpLib, AccumulatorAddRemoveRequest accumulatorAddRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling accumulatorAddRemove(Async)");
        }

        // verify the required parameter 'accumulatorAddRemoveRequest' is set
        if (accumulatorAddRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'accumulatorAddRemoveRequest' when calling accumulatorAddRemove(Async)");
        }

        return accumulatorAddRemoveCall(zkpLib, accumulatorAddRemoveRequest, _callback);

    }

    /**
     * Add and/or remove elements from an accumulator.
     * Returns AccumulatorAddRemoveResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param accumulatorAddRemoveRequest  (required)
     * @return AccumulatorAddRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AccumulatorAddRemoveResponse accumulatorAddRemove(String zkpLib, AccumulatorAddRemoveRequest accumulatorAddRemoveRequest) throws ApiException {
        ApiResponse<AccumulatorAddRemoveResponse> localVarResp = accumulatorAddRemoveWithHttpInfo(zkpLib, accumulatorAddRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Add and/or remove elements from an accumulator.
     * Returns AccumulatorAddRemoveResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param accumulatorAddRemoveRequest  (required)
     * @return ApiResponse&lt;AccumulatorAddRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccumulatorAddRemoveResponse> accumulatorAddRemoveWithHttpInfo(String zkpLib, AccumulatorAddRemoveRequest accumulatorAddRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = accumulatorAddRemoveValidateBeforeCall(zkpLib, accumulatorAddRemoveRequest, null);
        Type localVarReturnType = new TypeToken<AccumulatorAddRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add and/or remove elements from an accumulator. (asynchronously)
     * Returns AccumulatorAddRemoveResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param accumulatorAddRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accumulatorAddRemoveAsync(String zkpLib, AccumulatorAddRemoveRequest accumulatorAddRemoveRequest, final ApiCallback<AccumulatorAddRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accumulatorAddRemoveValidateBeforeCall(zkpLib, accumulatorAddRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<AccumulatorAddRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccumulatorData
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccumulatorDataCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vcp/createAccumulatorData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccumulatorDataValidateBeforeCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        return createAccumulatorDataCall(zkpLib, rngSeed, _callback);

    }

    /**
     * Create an accumulator and its associated secret/public data.
     * Returns CreateAccumulatorResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return CreateAccumulatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccumulatorResponse createAccumulatorData(String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<CreateAccumulatorResponse> localVarResp = createAccumulatorDataWithHttpInfo(zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create an accumulator and its associated secret/public data.
     * Returns CreateAccumulatorResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;CreateAccumulatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccumulatorResponse> createAccumulatorDataWithHttpInfo(String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = createAccumulatorDataValidateBeforeCall(zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<CreateAccumulatorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an accumulator and its associated secret/public data. (asynchronously)
     * Returns CreateAccumulatorResponse.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccumulatorDataAsync(String zkpLib, Integer rngSeed, final ApiCallback<CreateAccumulatorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccumulatorDataValidateBeforeCall(zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<CreateAccumulatorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccumulatorElement
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccumulatorElementCall(String zkpLib, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vcp/createAccumulatorElement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccumulatorElementValidateBeforeCall(String zkpLib, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling createAccumulatorElement(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAccumulatorElement(Async)");
        }

        return createAccumulatorElementCall(zkpLib, body, _callback);

    }

    /**
     * Create an accumulator element from the given text.
     * Returns AccumulatorElement.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param body  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String createAccumulatorElement(String zkpLib, String body) throws ApiException {
        ApiResponse<String> localVarResp = createAccumulatorElementWithHttpInfo(zkpLib, body);
        return localVarResp.getData();
    }

    /**
     * Create an accumulator element from the given text.
     * Returns AccumulatorElement.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param body  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createAccumulatorElementWithHttpInfo(String zkpLib, String body) throws ApiException {
        okhttp3.Call localVarCall = createAccumulatorElementValidateBeforeCall(zkpLib, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an accumulator element from the given text. (asynchronously)
     * Returns AccumulatorElement.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccumulatorElementAsync(String zkpLib, String body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccumulatorElementValidateBeforeCall(zkpLib, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorityData
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorityDataCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vcp/createAuthorityData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorityDataValidateBeforeCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        return createAuthorityDataCall(zkpLib, rngSeed, _callback);

    }

    /**
     * Create authority data.  Used in verifiable encryption.
     * Returns AuthorityData.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return AuthorityData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthorityData createAuthorityData(String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<AuthorityData> localVarResp = createAuthorityDataWithHttpInfo(zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create authority data.  Used in verifiable encryption.
     * Returns AuthorityData.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;AuthorityData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorityData> createAuthorityDataWithHttpInfo(String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = createAuthorityDataValidateBeforeCall(zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<AuthorityData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create authority data.  Used in verifiable encryption. (asynchronously)
     * Returns AuthorityData.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorityDataAsync(String zkpLib, Integer rngSeed, final ApiCallback<AuthorityData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorityDataValidateBeforeCall(zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<AuthorityData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMembershipProvingKey
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMembershipProvingKeyCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vcp/createMembershipProvingKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMembershipProvingKeyValidateBeforeCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        return createMembershipProvingKeyCall(zkpLib, rngSeed, _callback);

    }

    /**
     * Create accumulator membership proving key.
     * Returns MembershipProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String createMembershipProvingKey(String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<String> localVarResp = createMembershipProvingKeyWithHttpInfo(zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create accumulator membership proving key.
     * Returns MembershipProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createMembershipProvingKeyWithHttpInfo(String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = createMembershipProvingKeyValidateBeforeCall(zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create accumulator membership proving key. (asynchronously)
     * Returns MembershipProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMembershipProvingKeyAsync(String zkpLib, Integer rngSeed, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMembershipProvingKeyValidateBeforeCall(zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProof
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param createProofRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProofCall(String zkpLib, CreateProofRequest createProofRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProofRequest;

        // create path and map variables
        String localVarPath = "/vcp/createProof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProofValidateBeforeCall(String zkpLib, CreateProofRequest createProofRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling createProof(Async)");
        }

        // verify the required parameter 'createProofRequest' is set
        if (createProofRequest == null) {
            throw new ApiException("Missing the required parameter 'createProofRequest' when calling createProof(Async)");
        }

        return createProofCall(zkpLib, createProofRequest, _callback);

    }

    /**
     * Create a proof with respect to proof requirements from a Verifier.
     * Returns WarningsAndDataForVerifier.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param createProofRequest  (required)
     * @return WarningsAndDataForVerifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WarningsAndDataForVerifier createProof(String zkpLib, CreateProofRequest createProofRequest) throws ApiException {
        ApiResponse<WarningsAndDataForVerifier> localVarResp = createProofWithHttpInfo(zkpLib, createProofRequest);
        return localVarResp.getData();
    }

    /**
     * Create a proof with respect to proof requirements from a Verifier.
     * Returns WarningsAndDataForVerifier.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param createProofRequest  (required)
     * @return ApiResponse&lt;WarningsAndDataForVerifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarningsAndDataForVerifier> createProofWithHttpInfo(String zkpLib, CreateProofRequest createProofRequest) throws ApiException {
        okhttp3.Call localVarCall = createProofValidateBeforeCall(zkpLib, createProofRequest, null);
        Type localVarReturnType = new TypeToken<WarningsAndDataForVerifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a proof with respect to proof requirements from a Verifier. (asynchronously)
     * Returns WarningsAndDataForVerifier.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param createProofRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProofAsync(String zkpLib, CreateProofRequest createProofRequest, final ApiCallback<WarningsAndDataForVerifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProofValidateBeforeCall(zkpLib, createProofRequest, _callback);
        Type localVarReturnType = new TypeToken<WarningsAndDataForVerifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRangeProofProvingKey
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRangeProofProvingKeyCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vcp/createRangeProofProvingKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRangeProofProvingKeyValidateBeforeCall(String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        return createRangeProofProvingKeyCall(zkpLib, rngSeed, _callback);

    }

    /**
     * Create range proof proving key.
     * Returns RangeProofProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String createRangeProofProvingKey(String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<String> localVarResp = createRangeProofProvingKeyWithHttpInfo(zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create range proof proving key.
     * Returns RangeProofProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createRangeProofProvingKeyWithHttpInfo(String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = createRangeProofProvingKeyValidateBeforeCall(zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create range proof proving key. (asynchronously)
     * Returns RangeProofProvingKey.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRangeProofProvingKeyAsync(String zkpLib, Integer rngSeed, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRangeProofProvingKeyValidateBeforeCall(zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSignerData
     * @param claimType  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSignerDataCall(List<ClaimType> claimType, String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claimType;

        // create path and map variables
        String localVarPath = "/vcp/createSignerData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSignerDataValidateBeforeCall(List<ClaimType> claimType, String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimType' is set
        if (claimType == null) {
            throw new ApiException("Missing the required parameter 'claimType' when calling createSignerData(Async)");
        }

        return createSignerDataCall(claimType, zkpLib, rngSeed, _callback);

    }

    /**
     * Create the secret and public data used to sign and verify credentials.
     * Returns SignerData.
     * @param claimType  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return SignerData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SignerData createSignerData(List<ClaimType> claimType, String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<SignerData> localVarResp = createSignerDataWithHttpInfo(claimType, zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create the secret and public data used to sign and verify credentials.
     * Returns SignerData.
     * @param claimType  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;SignerData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignerData> createSignerDataWithHttpInfo(List<ClaimType> claimType, String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = createSignerDataValidateBeforeCall(claimType, zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<SignerData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create the secret and public data used to sign and verify credentials. (asynchronously)
     * Returns SignerData.
     * @param claimType  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSignerDataAsync(List<ClaimType> claimType, String zkpLib, Integer rngSeed, final ApiCallback<SignerData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSignerDataValidateBeforeCall(claimType, zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<SignerData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRangeProofMaxValue
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRangeProofMaxValueCall(String zkpLib, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vcp/getRangeProofMaxValue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRangeProofMaxValueValidateBeforeCall(String zkpLib, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling getRangeProofMaxValue(Async)");
        }

        return getRangeProofMaxValueCall(zkpLib, _callback);

    }

    /**
     * Get the maximum value supported in range proofs for the specific zkpLib.
     * Returns the maximum value.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Integer getRangeProofMaxValue(String zkpLib) throws ApiException {
        ApiResponse<Integer> localVarResp = getRangeProofMaxValueWithHttpInfo(zkpLib);
        return localVarResp.getData();
    }

    /**
     * Get the maximum value supported in range proofs for the specific zkpLib.
     * Returns the maximum value.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getRangeProofMaxValueWithHttpInfo(String zkpLib) throws ApiException {
        okhttp3.Call localVarCall = getRangeProofMaxValueValidateBeforeCall(zkpLib, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the maximum value supported in range proofs for the specific zkpLib. (asynchronously)
     * Returns the maximum value.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRangeProofMaxValueAsync(String zkpLib, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRangeProofMaxValueValidateBeforeCall(zkpLib, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sign
     * @param signRequest  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signCall(SignRequest signRequest, String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signRequest;

        // create path and map variables
        String localVarPath = "/vcp/sign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        if (rngSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rngSeed", rngSeed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signValidateBeforeCall(SignRequest signRequest, String zkpLib, Integer rngSeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signRequest' is set
        if (signRequest == null) {
            throw new ApiException("Missing the required parameter 'signRequest' when calling sign(Async)");
        }

        return signCall(signRequest, zkpLib, rngSeed, _callback);

    }

    /**
     * Create a signature from the given values and SignerData.
     * Returns Signature.
     * @param signRequest  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String sign(SignRequest signRequest, String zkpLib, Integer rngSeed) throws ApiException {
        ApiResponse<String> localVarResp = signWithHttpInfo(signRequest, zkpLib, rngSeed);
        return localVarResp.getData();
    }

    /**
     * Create a signature from the given values and SignerData.
     * Returns Signature.
     * @param signRequest  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> signWithHttpInfo(SignRequest signRequest, String zkpLib, Integer rngSeed) throws ApiException {
        okhttp3.Call localVarCall = signValidateBeforeCall(signRequest, zkpLib, rngSeed, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a signature from the given values and SignerData. (asynchronously)
     * Returns Signature.
     * @param signRequest  (required)
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (optional)
     * @param rngSeed A seed for a random number generator. Defaults to zero if not given. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signAsync(SignRequest signRequest, String zkpLib, Integer rngSeed, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = signValidateBeforeCall(signRequest, zkpLib, rngSeed, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccumulatorWitness
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param updateAccumulatorWitnessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccumulatorWitnessCall(String zkpLib, UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccumulatorWitnessRequest;

        // create path and map variables
        String localVarPath = "/vcp/updateAccumulatorWitness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccumulatorWitnessValidateBeforeCall(String zkpLib, UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling updateAccumulatorWitness(Async)");
        }

        // verify the required parameter 'updateAccumulatorWitnessRequest' is set
        if (updateAccumulatorWitnessRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccumulatorWitnessRequest' when calling updateAccumulatorWitness(Async)");
        }

        return updateAccumulatorWitnessCall(zkpLib, updateAccumulatorWitnessRequest, _callback);

    }

    /**
     * Update an accumulator witness.
     * Returns AccumulatorMembershipWitness.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param updateAccumulatorWitnessRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String updateAccumulatorWitness(String zkpLib, UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest) throws ApiException {
        ApiResponse<String> localVarResp = updateAccumulatorWitnessWithHttpInfo(zkpLib, updateAccumulatorWitnessRequest);
        return localVarResp.getData();
    }

    /**
     * Update an accumulator witness.
     * Returns AccumulatorMembershipWitness.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param updateAccumulatorWitnessRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateAccumulatorWitnessWithHttpInfo(String zkpLib, UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccumulatorWitnessValidateBeforeCall(zkpLib, updateAccumulatorWitnessRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an accumulator witness. (asynchronously)
     * Returns AccumulatorMembershipWitness.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param updateAccumulatorWitnessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccumulatorWitnessAsync(String zkpLib, UpdateAccumulatorWitnessRequest updateAccumulatorWitnessRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccumulatorWitnessValidateBeforeCall(zkpLib, updateAccumulatorWitnessRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyDecryption
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyDecryptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDecryptionCall(String zkpLib, VerifyDecryptionRequest verifyDecryptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyDecryptionRequest;

        // create path and map variables
        String localVarPath = "/vcp/verifyDecryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDecryptionValidateBeforeCall(String zkpLib, VerifyDecryptionRequest verifyDecryptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling verifyDecryption(Async)");
        }

        // verify the required parameter 'verifyDecryptionRequest' is set
        if (verifyDecryptionRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyDecryptionRequest' when calling verifyDecryption(Async)");
        }

        return verifyDecryptionCall(zkpLib, verifyDecryptionRequest, _callback);

    }

    /**
     * Verify a decryption.
     * Returns list of Warnings.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyDecryptionRequest  (required)
     * @return List&lt;Warning&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Warning> verifyDecryption(String zkpLib, VerifyDecryptionRequest verifyDecryptionRequest) throws ApiException {
        ApiResponse<List<Warning>> localVarResp = verifyDecryptionWithHttpInfo(zkpLib, verifyDecryptionRequest);
        return localVarResp.getData();
    }

    /**
     * Verify a decryption.
     * Returns list of Warnings.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyDecryptionRequest  (required)
     * @return ApiResponse&lt;List&lt;Warning&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Warning>> verifyDecryptionWithHttpInfo(String zkpLib, VerifyDecryptionRequest verifyDecryptionRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyDecryptionValidateBeforeCall(zkpLib, verifyDecryptionRequest, null);
        Type localVarReturnType = new TypeToken<List<Warning>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify a decryption. (asynchronously)
     * Returns list of Warnings.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyDecryptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDecryptionAsync(String zkpLib, VerifyDecryptionRequest verifyDecryptionRequest, final ApiCallback<List<Warning>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDecryptionValidateBeforeCall(zkpLib, verifyDecryptionRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Warning>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyProof
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyProofRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyProofCall(String zkpLib, VerifyProofRequest verifyProofRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyProofRequest;

        // create path and map variables
        String localVarPath = "/vcp/verifyProof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zkpLib != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zkpLib", zkpLib));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyProofValidateBeforeCall(String zkpLib, VerifyProofRequest verifyProofRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zkpLib' is set
        if (zkpLib == null) {
            throw new ApiException("Missing the required parameter 'zkpLib' when calling verifyProof(Async)");
        }

        // verify the required parameter 'verifyProofRequest' is set
        if (verifyProofRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyProofRequest' when calling verifyProof(Async)");
        }

        return verifyProofCall(zkpLib, verifyProofRequest, _callback);

    }

    /**
     * Verify a proof with respect to proof requirments.
     * Returns WarningsAndDecryptResponses.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyProofRequest  (required)
     * @return WarningsAndDecryptResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WarningsAndDecryptResponses verifyProof(String zkpLib, VerifyProofRequest verifyProofRequest) throws ApiException {
        ApiResponse<WarningsAndDecryptResponses> localVarResp = verifyProofWithHttpInfo(zkpLib, verifyProofRequest);
        return localVarResp.getData();
    }

    /**
     * Verify a proof with respect to proof requirments.
     * Returns WarningsAndDecryptResponses.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyProofRequest  (required)
     * @return ApiResponse&lt;WarningsAndDecryptResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarningsAndDecryptResponses> verifyProofWithHttpInfo(String zkpLib, VerifyProofRequest verifyProofRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyProofValidateBeforeCall(zkpLib, verifyProofRequest, null);
        Type localVarReturnType = new TypeToken<WarningsAndDecryptResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify a proof with respect to proof requirments. (asynchronously)
     * Returns WarningsAndDecryptResponses.
     * @param zkpLib Which ZKP library to use. AC2C_BBS, AC2C_PS or DNC (error if missing). (required)
     * @param verifyProofRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyProofAsync(String zkpLib, VerifyProofRequest verifyProofRequest, final ApiCallback<WarningsAndDecryptResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyProofValidateBeforeCall(zkpLib, verifyProofRequest, _callback);
        Type localVarReturnType = new TypeToken<WarningsAndDecryptResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
